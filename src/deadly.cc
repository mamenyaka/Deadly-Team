#line 2 "deadly.cc"

#line 4 "deadly.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include "deadly.h"

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 72
#define YY_END_OF_BUFFER 73
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1003] =
    {   0,
        0,    0,   73,   71,   72,   71,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    6,
        0,    0,    0,    0,   64,    0,   65,    0,   63,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    6,    0,    0,    0,
       64,   65,   63,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        6,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        8,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   15,
        0,   12,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    6,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    8,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       15,   12,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    1,    1,    0,
        0,    7,    0,    0,    4,    0,    0,   57,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   10,

        0,    9,    0,    0,    0,    0,    0,   37,    0,    0,
        0,    0,   26,    0,    0,    0,    0,   25,    0,    0,
        0,    0,    0,    0,    0,   30,    0,    0,    0,    0,
       24,    0,    0,    0,    0,   23,    0,   46,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       66,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    1,    1,    0,

        7,    0,    4,    0,   57,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   10,    9,    0,    0,    0,
        0,    0,    0,    0,    0,   37,    0,    0,    0,   26,
        0,    0,    0,   25,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   30,    0,    0,    0,
       24,    0,    0,    0,   23,   46,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   66,    0,    0,
        0,   68,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    7,    0,    4,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   16,
        0,   14,    0,   13,    0,   11,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   22,
        0,   21,    0,   20,    0,   19,    0,   18,    0,   17,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    3,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    2,    4,
        0,    0,   62,    0,   61,    0,   60,    0,   59,    0,
       58,    0,   56,    0,   55,    0,   54,    0,   53,    0,

       52,   16,   14,   13,   11,    0,   36,    0,   35,    0,
       34,    0,   40,    0,   39,    0,   38,   22,   21,   20,
       19,   18,   17,    0,   29,    0,   28,    0,   27,    0,
       33,    0,   32,    0,   31,    0,   51,    0,   50,    0,
       49,    0,   48,    0,   47,    0,   45,    0,   44,    0,
       43,    0,   42,    0,   41,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    2,
        0,    0,   62,   61,   60,   59,   58,   56,   55,   54,

       53,   52,   36,   35,   34,   40,   39,   38,   29,   28,
       27,   33,   32,   31,   51,   50,   49,   48,   47,   45,
       44,   43,   42,   41,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    2,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    2,    0,    5,    0,    0,   67,    0,    0,
        0,    0,   70,    0,    0,    0,    0,    0,    0,    0,
        0,   70,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   67,   70,    0,    0,    0,   70,    0,    0,    0,
        0,    0,   69,    0,    0,    0,   70,    0,    0,   70,
        0,    0,    0,    0,   69,    0,   70,    0,    0,    0,
        0,    0,    0,   69,    0,    0,    0,   69,    0,   69,
        0,    0,    0,   69,    0,    0,   69,    0,   70,    0,
        0,   69,    0,   69,    0,    0,    0,   69,    0,   69,
        0,    0,   69,    0,    0,    0,    0,    0,    0,    0,
       69,    0,    0,    0,    0,    0,    0,   69,    0,    0,
        0,    0,    0,   69,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   69,    0,    0,    0,

        0,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    1,    1,    1,    1,    6,
        7,    1,    1,    1,    8,    9,    1,   10,   11,   12,
       13,   14,   15,   16,   16,   16,   16,   17,    1,    1,
        1,    1,    1,    1,    1,   18,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   19,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   20,    1,   21,   22,   23,   24,

       25,   26,   27,   28,   29,    1,    1,   30,   31,   32,
       33,   34,    1,   35,   36,   37,    1,   38,   39,    1,
       40,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[41] =
    {   0,
        1,    2,    3,    2,    4,    3,    5,    6,    7,    8,
        8,    8,    8,    8,    8,    8,    3,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    9,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1510] =
    {   0,
        0,    1, 2658, 7030, 7030,    2,    0, 2617, 2609, 2610,
        0, 2607, 2626, 2625, 2624, 2626, 2625,    7, 2607, 2598,
     2598,    3, 2597, 2578,   11,   12,   19,   19,    9,   43,
        0,   26, 2563, 2570,   53, 2553, 2552, 2529,   56,   60,
       61,   64,   65,   68, 2561,   13, 2560, 2548, 2544, 2529,
     2526, 2522, 2515,    0, 2498,   69,   72, 2461,   73,    0,
     2458, 2443, 2451,   76,   77,   80,   81,   84,   85,   80,
       14,   89,   62,   84,   65,   86,   89,   99,  107,  123,
     2447,  110,  138,  126,  114,  118,    0, 2426, 2411, 2411,
      127,  139,  153, 2423, 2411, 2407, 2400, 2391,  156,  160,

     2387, 2372, 2360,  159,  161, 2345, 2342, 2335,  163,  165,
     2334, 2324, 2315,  169,  172,  173,  176,  179,  180,  194,
     2284,    0,  220,  235,  250,  265,  183,  280,  184,  195,
        0, 2291, 2287, 2266,  198,  200,  205,  221,  236,  251,
      266,   76,   95,  281,  275,  295,  289,  301,  122,  204,
      302,  296,  308,  302,  314,  315,  309,  314,  328,  329,
      332,  333,  336,  337,  340,    0, 2260, 2249,  343,    0,
      344,  363,  347,  378,  351,  393,  408,  423,    0,  352,
      355,  356,  364, 7030, 2238,  379, 2238,  394,  409, 2249,
     2246, 2217, 2214, 2190, 2184, 2165, 2162, 2146, 2140,  424,

      438,  439,  442,  443, 2140, 2116, 2110, 2101,  446,  447,
     2092, 2083, 2077,  450,  451, 2063, 2057, 2053,  454,  455,
     2031, 2025, 2016, 2010, 1999, 1998,  458,  459, 1992, 1970,
     1950,  462,  463, 1946, 1915, 1869,  466,  467,  470,  471,
     1858, 1857, 1854, 1842, 1839, 1830, 1824, 1815, 1809, 1798,
      474,  475,  478,  479, 1774,  483,  486, 1783, 1763,  487,
      490,  505,  520,  535,  550,  565,  491,  580,  595,    0,
      610,  625,  640,  655,  670,  685,  700,    0,    0,  494,
      495,  498, 1768,  499,    0, 1764,  509,  510, 1779, 1764,
     1754, 1749, 1740, 1734, 1723, 1719, 1716, 1713,  524,  525,

      554,  555,  569,  570,  599,  600,  611,  629, 1686, 1671,
     1649,  630,  659, 1637, 1634, 1622,  660,  671,  715,  716,
      719,  720,  723,  724,  727,  728, 1619, 1616, 1592,  731,
      732, 1586, 1577, 1571,  735,  736,  739,  740, 1556, 1547,
     1541, 1519, 1504, 1495, 1489, 1486, 1462, 1456, 1433,  743,
      744,  747, 1423,  748,    0,  776,  762,  791,  824, 1403,
        0,    0,  839,  854,  869,  902,  917,  932,  947,  962,
      995, 1402,    0,    0,    0, 1010, 1025, 1040, 1073, 1088,
     1103, 1118, 1133, 1399,    0,    0,    0, 1148, 1396,    0,
     1163,    0, 1178, 1193, 1208, 1241, 1256,    0,    0,  752,

      766, 1360,    0,  767,    0,  770,  771,  780,  781,  795,
      796,  806,  807,  810,  811,    0,    0,  814,  815,  818,
      819,  828,  829,  843,  844,    0,  858,  859,  873,    0,
      874,  884,  885,    0,  888,  889,  892,  893,  896,  897,
      936,  951,  952,  966,  977,  978,    0,  981,  982,  985,
        0,  986,  989,  990,    0,    0,  999, 1014, 1029, 1030,
     1044, 1055, 1056, 1059, 1060, 1063, 1355,    0, 1271, 1064,
     1069, 7030, 1363, 1321, 1107, 1299, 1122, 1319, 1352, 1318,
     1367,  277, 1382, 1397, 1430, 1445, 1460, 1493, 1288, 1508,
     1119, 1523, 1268, 1530, 1545, 1228,    0,    0, 1225, 1560,

     1150, 1575, 1590, 1623, 1638, 1653, 1213, 1660, 1675, 1690,
     1723, 1210,    0,    0, 1738, 1753, 1786, 1801, 1816, 1831,
     1846, 1207,    0,    0, 1183, 1861, 1165, 1177,    0, 1876,
        0, 1162, 1883,    0, 1068,    0,    0, 1168, 1212, 1223,
     1224, 1227, 1228, 1231, 1232, 1235, 1236, 1272, 1275, 1276,
     1286, 1287, 1290, 1291, 1294, 1295, 1303, 1304, 1314, 1315,
     1323, 1324, 1334, 1335, 1338, 1339, 1342, 1343, 1346, 1347,
     1356, 1357, 1371, 1372, 1386, 1387, 1401, 1402, 1412, 1413,
     1416, 1417, 1420, 1421, 1424, 1425, 1449, 1464, 1475, 1476,
     1479, 1480, 1483, 1484, 1487, 1488, 1497, 1512, 1513, 1527,

     1528, 1549, 1564, 1565, 1579, 1594, 1605, 1606, 1609, 1610,
     1613, 1614, 1617, 1618, 1657, 1658, 1679, 1680, 1694, 1695,
     1705, 1706, 1140, 1898, 1709, 1710, 1159, 1134, 1713, 1117,
     1717, 1922, 1102, 1957, 1977, 1104, 1166, 1984, 1057,    0,
     1999,    3,  534, 2014, 2029, 1035, 2064, 2084, 2099, 2114,
     2147, 1695, 1015, 2154, 1009,    0, 2169, 1007, 1710, 2176,
      998, 2191, 2224,  992, 1711, 2231,  983, 1725, 2238, 2253,
      961, 2268, 2275, 2290, 1768, 2310, 2343, 1758,    0, 7030,
     1772, 1773, 1776, 1777, 1780, 1781, 1820, 1835, 1880, 1881,
     1899, 1902, 1903, 1913, 1914, 1917, 1918, 1926, 1927, 1937,

     1938,    0,    0,    0,    0, 1941, 1942, 1945, 1946, 1949,
     1950, 1953, 1961, 1962, 1972, 1973, 1981,    0,    0,    0,
        0,    0,    0, 1982, 2018, 2033, 2044, 2045, 2048, 2049,
     2052, 2053, 2056, 2057, 2060, 2068, 2079, 2080, 2088, 2103,
     2118, 2129, 2130, 2133, 2134, 2137, 2138, 2141, 2142, 2151,
     2195, 2206, 2207, 2210, 2211,  940, 2358,  905,  903, 2214,
     2373,  899, 2408, 2443,  221, 2450,  235, 2465,  363,   22,
      609, 2480, 2495,  393, 2530, 2565, 2580, 2600, 2633, 2186,
     2196, 2640, 2240, 2655,  873,  871,  348, 2670, 2703,    0,
     2219, 2273,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  895, 2294,  836,  821, 2305, 2718,
      806, 2733,  791, 2768,  610,  640, 2325, 2783,  670,  788,
     2297, 2810, 2299, 2300,    0, 2303,  394,  743, 2817,    0,
     2336,    0, 2359, 2362, 2377,  740, 2388, 2829,  717, 2844,
      671, 2859,  758, 2874, 2889, 1103, 2904, 2911, 2926, 2346,
     2360,  667, 7030, 2393, 7030,  685, 2397, 2400, 2401,  686,
     2404, 2412, 2391, 2933, 2424, 2427, 2945, 2960, 2972, 2987,
     3002, 2399, 3009, 3024, 3039, 3051, 3063, 3078, 3093, 3108,

      681, 2432, 7030,  653, 2435,  623,  564, 2436, 3115, 2447,
      582, 2484, 2416, 3122, 2499, 3134,  579, 3141, 3153,  901,
     3168, 3175, 3187, 3202, 2478, 3209, 3224, 3249, 3261, 3273,
     3288, 3300,  578, 7030,  548, 2511, 3307, 7030,  537,  504,
     2515, 3314, 2519, 2491, 3321, 3328,  516, 3335,  916, 3342,
     3349,  501, 3356,  964, 3368, 3375, 3382,    0, 3389,    0,
     3396, 3408, 2492, 3415,  499,  479, 2534,  424, 2545,  380,
      328, 2549, 3422, 2550, 3429, 2554, 3436, 1072, 3443, 3450,
     3457, 3464, 3471, 1087, 3483, 3490,  356,  345, 2558, 2569,
      284, 2581, 2592, 2615, 3497, 3504, 1147, 3511, 3518, 2604,

     2619, 7030, 3534, 3542, 3549, 3556, 3564, 3572, 3579, 3586,
     3593, 3601, 3609,  264, 3616, 3623, 3630, 3637, 3644, 3651,
     3659, 3668, 3676, 3683,  195, 3690, 3697, 3704, 3711, 3719,
     3728, 3737, 3746, 3755, 3763,  171, 3770, 3777, 3784, 3791,
     3798, 3805, 3812, 3819, 3826, 3833, 3840, 3847, 3854, 3861,
     3869, 3877, 3886, 3895, 3904, 3913, 3922, 3931, 3940, 3949,
     3958, 3967, 3975, 3982, 3989, 3996, 4003, 4010, 4017, 4024,
     4031, 4038, 4045, 4052, 4059, 4066, 4074, 4083, 4092, 4101,
     4110, 4119, 4128, 4137, 4146, 4155, 4164, 4173, 4182, 4191,
     4200, 4209, 4218, 4226, 4233, 4240,  118, 4247, 4254, 4261,

     4268, 4275, 4282, 4289, 4296, 4303, 4310, 4317, 4324, 4331,
     4338, 4345, 4352, 4359, 4366, 4373, 4380, 4387, 4394, 4401,
     4408, 4415, 4422, 4429, 4436, 4443, 4450, 4457, 4464, 4472,
     4481, 4490, 4499, 4507, 4515, 4524, 4533, 4542, 4551, 4560,
     4569, 4578, 4587, 4596, 4605, 4614, 4623, 4632, 4641, 4650,
     4659, 4668, 4676, 4683,   97, 4691, 4695, 4702, 4709, 4716,
     4723, 4730, 4737, 4744, 4751, 4758, 4765, 4768, 4771, 4778,
     4785, 4792, 4799, 4806, 4813, 4820, 4827, 4830, 4837, 4844,
     4851, 4854, 4861, 4868, 4875, 4878, 4885, 4892, 4899, 4906,
     4913, 4920, 4927, 4934, 4941, 4948, 4955, 4962, 4965, 4972,

     4979, 4986, 4989, 4996, 5003, 5010, 5013, 5016, 5023, 5030,
     5037, 5044, 5051, 5058, 5065, 5072, 5079, 5086, 5089, 5097,
     5105, 5113, 5122, 5130, 5138, 5146, 5154, 5163, 5172, 5181,
     5190, 5199, 5208, 5217, 5226, 5235, 5244, 5253, 5262, 5271,
     5280, 5289, 5298, 5307, 5316, 5325, 5329, 5336,   96, 5344,
     5353, 5361, 5368, 5375, 5382, 5389, 5396, 5403, 5410, 5417,
     5424, 5431, 5438, 5445, 5452, 5459, 5466, 5473, 5480, 5487,
     5494, 5501, 5508, 5515, 5522, 5529, 5536, 5543, 5550, 5557,
     5564, 5571, 5578, 5585, 5592, 5599, 5606, 5613, 5620, 5627,
     5634, 5641, 5648, 5655, 5662, 5669, 5676, 5683, 5690, 5697,

     5704, 5711, 5718, 5725, 5732, 5739, 5746, 5753, 5760, 5767,
     5774, 5781, 5788, 5795, 5802, 5809, 5816, 5823, 5830, 5837,
     5844, 5851, 5858, 5865, 5872, 5879, 5886, 5893, 5900, 5907,
     5914, 5921, 5928, 5935, 5942, 5950, 5958, 5966, 5974, 5982,
     5991, 6000, 6009, 6018, 6027, 6036, 6045, 6054, 6063, 6072,
     6081, 6090, 6098,   51, 6106, 6114, 6121, 6128, 6135, 6142,
     6149, 6156, 6163, 6170, 6177, 6184, 6191, 6198, 6205, 6212,
     6219, 6226, 6233, 6240, 6247, 6250, 6253, 6256, 6259, 6266,
     6273, 6280, 6287, 6294, 6301, 6308, 6315, 6322, 6329, 6336,
     6343, 6346, 6349, 6352, 6355, 6358, 6361, 6368, 6375, 6382,

     6389, 6396, 6403, 6410, 6417, 6424, 6431, 6438, 6445, 6452,
     6459, 6466, 6473, 6480, 6487, 6494, 6501, 6508, 6515, 6522,
     6529, 6536, 6543, 6550, 6557, 6564, 6571, 6578, 6585, 6593,
     6601, 6609, 6618, 6627, 6636, 6645, 6654, 6663, 6672,   44,
     6681, 6690, 6694, 6697, 6700, 6703, 6706, 6709, 6712, 6715,
     6718, 6721, 6724, 6727, 6730, 6733, 6736, 6739, 6742, 6745,
     6748, 6751, 6754, 6757, 6760, 6763, 6766, 6769, 6772, 6775,
     6778, 6781, 6784, 6787, 6794, 6802, 6811,   25, 6820, 6829,
     6837, 6844, 6851, 6859, 6868, 6876, 6881, 6888, 6895, 6902,
     6909, 6917, 6923, 6928, 6935, 6940, 6947, 6954, 6959, 6964,

     6971, 6976, 6983, 6990, 6995, 7000, 7007, 7014, 7021
    } ;

static yyconst flex_int16_t yy_def[1510] =
    {   0,
     1003, 1003, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1004, 1005, 1006, 1002, 1002, 1002,
     1007, 1002, 1002, 1002, 1008, 1002, 1002, 1002, 1004, 1009,
     1005, 1010, 1006, 1011, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1012, 1002, 1013, 1002, 1002, 1008, 1014,
     1002, 1002, 1002, 1015, 1009, 1016, 1010, 1017, 1011, 1002,
     1002, 1018, 1002, 1002, 1002, 1002, 1002, 1019, 1020, 1021,
     1002, 1013, 1022, 1002, 1023, 1024, 1025, 1002, 1002, 1002,
     1015, 1016, 1017, 1002, 1002, 1002, 1002, 1002, 1018, 1026,

     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1019, 1027, 1020, 1028, 1021, 1029, 1021,
     1002, 1030, 1022, 1031, 1032, 1033, 1023, 1034, 1024, 1035,
     1036, 1002, 1002, 1002, 1037, 1002, 1002, 1038, 1039, 1040,
     1026, 1002, 1002, 1041, 1002, 1042, 1002, 1043, 1002, 1002,
     1044, 1002, 1045, 1002, 1046, 1047, 1002, 1002, 1048, 1027,
     1049, 1028, 1050, 1029, 1051,  120,  118, 1002, 1052, 1053,
     1031, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1034,
     1062, 1063, 1064, 1002, 1002, 1065, 1002, 1037, 1066, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1038,

     1067, 1039, 1068, 1040, 1002, 1002, 1002, 1002, 1041, 1069,
     1002, 1002, 1002, 1042, 1070, 1002, 1002, 1002, 1043, 1071,
     1002, 1002, 1002, 1002, 1002, 1002, 1044, 1072, 1002, 1002,
     1002, 1045, 1073, 1002, 1002, 1002, 1046, 1074, 1047, 1075,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1048, 1049, 1002, 1002, 1002, 1051, 1076,  118, 1002, 1077,
     1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1082, 1086,
     1087, 1083, 1085, 1088, 1089, 1090, 1091, 1092, 1093, 1094,
     1094, 1095, 1002, 1096, 1097, 1002, 1098, 1099, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1100, 1101,

     1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1002, 1002,
     1002, 1110, 1111, 1002, 1002, 1002, 1112, 1113, 1114, 1115,
     1116, 1117, 1118, 1119, 1120, 1121, 1002, 1002, 1002, 1122,
     1123, 1002, 1002, 1002, 1124, 1125, 1126, 1127, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1128,
     1129, 1130, 1002, 1131, 1132, 1133, 1134, 1133, 1133,  358,
      358,  359, 1135, 1136, 1135, 1137, 1137, 1138, 1139, 1138,
     1138,  370,  370,  371, 1140, 1141, 1142, 1141, 1143, 1143,
     1144, 1145, 1146,  370,  370,  371, 1147, 1148,  378,  378,
      380,  380, 1149, 1150, 1149, 1151, 1151, 1152, 1152, 1153,

     1154, 1002, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162,
     1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172,
     1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182,
     1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
     1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202,
     1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212,
     1213, 1214, 1215, 1216, 1217, 1218, 1002, 1219, 1220, 1221,
     1222, 1002, 1223, 1002, 1224, 1225, 1226, 1225, 1225, 1227,
     1227,  478, 1228, 1229, 1230, 1231, 1231, 1231, 1232, 1232,
      487, 1233,  487,  488, 1234,  487,  487,  488, 1235, 1235,

      487, 1236, 1236, 1237, 1237, 1238,  503,  505, 1239, 1239,
     1239,  510,  510,  511, 1240, 1240, 1241, 1241, 1242, 1243,
     1244,  487,  487,  488, 1245, 1246,  487,  503,  503,  505,
      505,  503,  505, 1247, 1248, 1249, 1250, 1251, 1252, 1253,
     1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263,
     1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273,
     1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
     1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293,
     1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
     1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,

     1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
     1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333,
     1334, 1335, 1002, 1336, 1337, 1337, 1338, 1002, 1002, 1002,
     1339, 1340, 1002, 1340, 1340,  634,  634,  635, 1341,  634,
     1342, 1338, 1338, 1338, 1343, 1344, 1343, 1343, 1345, 1345,
     1345,  650,  650,  651, 1346,  647, 1347,  647,  647,  648,
      647, 1348, 1347,  647,  647,  648,  647,  647,  648, 1348,
      670,  663,  663, 1349, 1350, 1351, 1352, 1353, 1354, 1002,
     1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364,
     1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374,

     1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384,
     1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394,
     1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404,
     1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414,
     1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424,
     1425, 1426, 1427, 1428, 1429, 1002, 1430, 1002, 1002, 1431,
     1432, 1002, 1432, 1432,  763,  764,  763, 1433, 1434, 1434,
     1434, 1434, 1435, 1434, 1435, 1435, 1436, 1436, 1436,  778,
      778,  779,  778, 1437,  775, 1438,  775, 1439, 1437, 1440,
     1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450,

     1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460,
     1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470,
     1471, 1472, 1473, 1474, 1002, 1475, 1002, 1002, 1002, 1476,
     1002, 1476,  832, 1476, 1477, 1477, 1477,  775, 1477,  775,
      778,  779,  778,  778,  779,  778,  832,  775,  789, 1478,
     1479, 1480, 1475, 1481, 1482, 1002, 1483,  834, 1002,  834,
      832, 1477, 1477, 1484,  838, 1477,  838,  779,  779,  778,
      778,  775, 1002, 1479, 1002, 1485, 1486, 1481, 1482, 1487,
     1488, 1489,  832,  858, 1490, 1491,  858,  860, 1477,  862,
     1492,  775,  865,  862, 1484,  865,  779,  869,  869,  838,

     1485, 1486, 1002, 1493, 1488, 1494, 1002, 1495,  858, 1490,
     1496, 1497,  832,  887, 1498,  887, 1477,  889,  889, 1477,
      889,  865,  889, 1492,  775,  896,  869,  897,  897,  897,
      895,  896, 1499, 1002, 1500, 1501,  858, 1002, 1502, 1002,
     1503,  887, 1504,  832,  916,  889, 1477,  919, 1477,  921,
      865, 1477,  923, 1477,  921,  896,  897,  927,  929,  927,
      930,  924,  775,  932, 1002, 1505, 1002, 1506, 1507,  937,
     1002, 1508,  916, 1477,  919, 1477,  923, 1477,  955,  896,
      897,  929,  930, 1477,  955,  932, 1002, 1002, 1002, 1509,
      937, 1477, 1477, 1477,  929,  930, 1477,  985,  932, 1002,

     1477,    0, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,

     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,

     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,

     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,

     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,

     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002
    } ;

static yyconst flex_int16_t yy_nxt[7071] =
    {   0,
     1002, 1002,    5,    5, 1002,    6,    6,    7,   30,  472,
       30,   31,   39,   41,   39,   41,   71,   13,   14,   72,
       43,   15,   43,  769,   22,   16,   17,   35,  472,    8,
        9,   10,  873,   18,   36,   97,   23,   11,   52,   12,
       45,   46,  836,   53,   30,   47,   30,   31,   48,   55,
       98,  850,   49,   50,   59,   51,   59,   39,  790,   39,
       56,   64,   41,   64,   41,   66,   43,   66,   43,   68,
       82,   68,   82,   84,   59,   84,   59,   64,   64,   64,
       64,   66,   66,   66,   66,   68,   68,   68,   68,   94,
       99,  101,   99,  103,  106,  108,  102,  205,  111,  107,

      114,   85,  114,  680,  536,  104,   85,  109,  116,   95,
      116,   82,  206,   82,   96,  127,  207,  127,  112,  129,
      105,  129,  110,  113,  119,  403,  119,   84, 1002,   84,
     1002,  208,  120,  120,  120,  120,  120,  120,  120,  123,
     1002,  123, 1002,  221,  222,  124,  125,  126,  126,  126,
      126,  126,  126,  126, 1002,   85, 1002,   99,  223,   99,
       85,  140,  145,  140,  147,  146,  152,  148,  154,  153,
      114,  155,  114,  159,  116,  159,  116,  161,  184,  161,
      119,  119,  119,  119,  127,  129,  127,  129,  120,  120,
      120,  120,  120,  120,  120,  164,  182,  164,  182,  188,

      165,  188,  131,  166,  166,  166,  166,  166,  166,  166,
      190,  191,  192,  193,  194,  195,  196,  197,  198,  199,
      167,  123,  200,  123,  200,  224,  225,  124,  125,  125,
      125,  125,  125,  125,  125,  125,  171,  202,  171,  202,
      226,  833,  124,  172,  172,  172,  172,  172,  172,  172,
      172,  171,  140,  171,  140,  763,  356,  124,  174,  174,
      174,  174,  174,  174,  174,  174,  176,  140,  176,  140,
      356,   87,  124,  177,  178,  178,  178,  178,  178,  178,
      178,  180,  209,  180,  209,  211,  212,  213,  944,  181,
      181,  181,  181,  181,  181,  181,  214,  632,  214,  216,

      217,  218,  219,  227,  219,  227,  229,  230,  231,  232,
      356,  232,  234,  235,  236,  237,  239,  237,  239,  241,
      242,  243,  244,  245,  246,  247,  248,  249,  250,  159,
      159,  159,  159,  161,  161,  161,  161,  253,  164,  253,
      164,  256,  165,  256,  261,  171,  261,  171,  261,  938,
      261, 1002,  261,  180,  261,  180,  180,  182,  180,  182,
      934,  759,  255,  255,  171,  281,  171,  281,  848,  472,
      124,  264,  264,  264,  264,  264,  264,  264,  264,  267,
      284,  267,  284,  486,  913,  124,  268,  268,  268,  268,
      268,  268,  268,  268,  176,  188,  176,  188,  835,  472,

      124,  271,  271,  271,  271,  271,  271,  271,  271,  267,
      287,  267,  287,  839,  833,  124,  273,  273,  273,  273,
      273,  273,  273,  273,  275,  200,  275,  200,  938,  356,
      124,  276,  277,  277,  277,  277,  277,  277,  277,  299,
      202,  299,  202,  301, 1002,  301, 1002,  209,  307,  209,
      307,  214,  312,  214,  312,  219,  317,  219,  317,  227,
      325,  227,  325,  232,  330,  232,  330,  237,  335,  237,
      335,  239,  337,  239,  337, 1002, 1002, 1002, 1002,  253,
      253,  253,  253,  934,  256,  165,  256,  350,  261,  350,
      261,  261,  267,  261,  267,  400,  281,  400,  281,  281,

      284,  281,  284,  903,  255,  255,  357,  472,  357,  358,
      287,  287,  287,  287,  359,  359,  359,  359,  359,  359,
      359,  357,  472,  357,  361,  299,  299,  299,  299,  362,
      362,  362,  362,  362,  362,  362,  364,  759,  364,  365,
      472,  938,  124,  366,  367,  367,  367,  367,  367,  367,
      367,  369,  934,  369,  370,  301,  301,  301,  301,  371,
      371,  371,  371,  371,  371,  371,  369,  770,  369,  373,
      418,  420,  418,  420,  374,  374,  374,  374,  374,  374,
      374,  377,  903,  377,  378,  472,  938,  124,  379,  380,
      380,  380,  380,  380,  380,  380,  369,  759,  369,  370,

      422,  424,  422,  424,  371,  371,  371,  371,  371,  371,
      371,  171,  307,  171,  307,  472,  472,  124,  383,  383,
      383,  383,  383,  383,  383,  383,  369,  934,  369,  373,
      307,  312,  307,  312,  374,  374,  374,  374,  374,  374,
      374,  377,  770,  377,  378,  862,  472,  124,  379,  380,
      380,  380,  380,  380,  380,  380,  369,  903,  369,  385,
      312,  317,  312,  317,  386,  386,  386,  386,  386,  386,
      386,  275,  317,  275,  317,  863,  472,  124,  388,  388,
      388,  388,  388,  388,  388,  388,  377,  875,  377,  390,
      903,  875,  124,  391,  392,  392,  392,  392,  392,  392,

      392,  394,  900,  394,  395,  866,  888,  124,  396,  397,
      397,  397,  397,  397,  397,  397,  435,  437,  435,  437,
      439,  441,  439,  441,  443,  445,  443,  445,  325,  325,
      325,  325,  330,  330,  330,  330,  335,  335,  335,  335,
      337,  337,  337,  337,  350,  350,  350,  350,  119,  261,
      119,  261,  885,  400,  472,  400,  120,  120,  120,  120,
      120,  120,  120,  357,  472,  357,  474,  400,  538,  400,
      538,  539,  541,  539,  541,  881,  469,  357,  872,  357,
      358,  543,  545,  543,  545,  359,  359,  359,  359,  359,
      359,  359,  357,  890,  357,  358,  547,  549,  547,  549,

      359,  359,  359,  359,  359,  359,  359,  551,  553,  551,
      553,  555,  557,  555,  557,  418,  559,  418,  559,  420,
      561,  420,  561,  867,  476,  477,  861,  477,  478,  422,
      563,  422,  563,  479,  479,  479,  479,  479,  479,  479,
      357,  859,  357,  361,  424,  565,  424,  565,  362,  362,
      362,  362,  362,  362,  362,  364,  856,  364,  480,  567,
      569,  567,  569,  481,  481,  481,  481,  481,  481,  481,
      357,  855,  357,  361,  571,  573,  571,  573,  362,  362,
      362,  362,  362,  362,  362,  575,  577,  575,  577,  435,
      579,  435,  579,  437,  581,  437,  581,  439,  583,  439,

      583,  826,  482,  364,  847,  364,  365,  472,  773,  124,
      366,  367,  367,  367,  367,  367,  367,  367,  483,  831,
      483,  484,  472,  828,  124,  366,  485,  485,  485,  485,
      485,  485,  485,  369,  770,  369,  487,  441,  472,  441,
      827,  488,  488,  488,  488,  488,  488,  488,  369,  770,
      369,  489,  585,  443,  585,  443,  490,  490,  490,  490,
      490,  490,  490,  369,  825,  369,  487,  587,  472,  587,
      472,  488,  488,  488,  488,  488,  488,  488,  445,  589,
      445,  589,  591,  593,  591,  593,  595,  597,  595,  597,
      599,  601,  599,  601,  501,  491,  492,  770,  492,  493,

      603,  472,  603,  486,  494,  494,  494,  494,  494,  494,
      494,  369,  486,  369,  497,  605,  472,  605,  645,  498,
      498,  498,  498,  498,  498,  498,  377,  645,  377,  499,
      607,  609,  607,  609,  500,  500,  500,  500,  500,  500,
      500,  369,  783,  369,  497,  611,  472,  611,  781,  498,
      498,  498,  498,  498,  498,  498,  613,  615,  613,  615,
      617,  619,  617,  619,  621,  625,  621,  625,  774,  678,
      261,  678,  261,  501,  377,  472,  377,  503,  472,  472,
      124,  504,  505,  505,  505,  505,  505,  505,  505,  506,
      767,  506,  507,  472,  472,  124,  504,  508,  508,  508,

      508,  508,  508,  508,  369,  770,  369,  510,  629,  472,
      629,  630,  511,  511,  511,  511,  511,  511,  511,  369,
      770,  369,  513,  477,  632,  477,  633,  514,  514,  514,
      514,  514,  514,  514,  377,  762,  377,  516,  894,  645,
      124,  517,  518,  518,  518,  518,  518,  518,  518,  171,
      759,  171,  486,  472,  758,  124,  521,  521,  521,  521,
      521,  521,  521,  521,  377,  472,  377,  503,  756,  538,
      645,  538,  505,  505,  505,  505,  505,  505,  505,  369,
      770,  369,  523,  486,  472,  645,  356,  524,  524,  524,
      524,  524,  524,  524,  394,  656,  394,  525,  486,  765,

      124,  388,  526,  526,  526,  526,  526,  526,  526,  369,
      496,  369,  523,  539,  472,  539,  674,  524,  524,  524,
      524,  524,  524,  524,  682,  541,  682,  541,  684,  543,
      684,  543,  686,  545,  686,  545,  688,  547,  688,  547,
      486,  527,  377,  368,  377,  529,  656,  472,  124,  530,
      531,  531,  531,  531,  531,  531,  531,  506,  652,  506,
      532,  486,  472,  124,  530,  533,  533,  533,  533,  533,
      533,  533,  119,  690,  119,  690,  549,  692,  549,  692,
      120,  120,  120,  120,  120,  120,  120,  551,  694,  551,
      694,  553,  696,  553,  696,  555,  698,  555,  698,  624,

      357,  647,  357,  358,  557,  700,  557,  700,  359,  359,
      359,  359,  359,  359,  359,  559,  559,  559,  559,  632,
      357,  642,  357,  358,  561,  561,  561,  561,  359,  359,
      359,  359,  359,  359,  359,  563,  563,  563,  563,  565,
      565,  565,  565,  567,  706,  567,  706,  569,  708,  569,
      708,  636,  634,  477,  628,  477,  478,  571,  710,  571,
      710,  635,  635,  635,  635,  635,  635,  635,  629,  472,
      629,  637,  573,  712,  573,  712,  638,  638,  638,  638,
      638,  638,  638,  483,  623,  483,  639,  575,  714,  575,
      714,  481,  481,  481,  481,  481,  481,  481,  357,  535,

      357,  361,  577,  716,  577,  716,  362,  362,  362,  362,
      362,  362,  362,  579,  579,  579,  579,  581,  581,  581,
      581,  583,  583,  583,  583,  585,  585,  585,  585,  496,
      640,  483,  486,  483,  484,  486,  356,  124,  366,  641,
      641,  641,  641,  641,  641,  641,  369,  470,  369,  487,
      587,  472,  587,  467,  488,  488,  488,  488,  488,  488,
      488,  369,  466,  369,  487,  587,  472,  587,  465,  488,
      488,  488,  488,  488,  488,  488,  589,  589,  589,  589,
      591,  724,  591,  724,  593,  726,  593,  726,  595,  728,
      595,  728,  464,  491,  492,  463,  492,  493,  597,  472,

      597,  462,  494,  494,  494,  494,  494,  494,  494,  629,
      461,  629,  643,  730,  599,  730,  599,  644,  644,  644,
      644,  644,  644,  644,  492,  460,  492,  646,  732,  601,
      732,  601,  490,  490,  490,  490,  490,  490,  490,  648,
      648,  648,  648,  648,  648,  648,  357,  459,  357,  650,
      734,  472,  734,  458,  651,  651,  651,  651,  651,  651,
      651,  629,  457,  629,  653,  603,  736,  603,  736,  654,
      654,  654,  654,  654,  654,  654,  369,  454,  369,  497,
      605,  472,  605,  453,  498,  498,  498,  498,  498,  498,
      498,  369,  452,  369,  497,  738,  472,  738,  450,  498,

      498,  498,  498,  498,  498,  498,  607,  740,  607,  740,
      609,  742,  609,  742,  611,  744,  611,  744,  613,  746,
      613,  746,  449,  501,  377,  448,  377,  503,  433,  472,
      124,  504,  505,  505,  505,  505,  505,  505,  505,  506,
      432,  506,  507,  431,  472,  124,  504,  508,  508,  508,
      508,  508,  508,  508,  506,  429,  506,  655,  615,  748,
      615,  748,  500,  500,  500,  500,  500,  500,  500,  657,
      657,  657,  657,  657,  657,  657,  369,  428,  369,  370,
      617,  750,  617,  750,  371,  371,  371,  371,  371,  371,
      371,  369,  427,  369,  370,  619,  752,  619,  752,  371,

      371,  371,  371,  371,  371,  371,  621,  754,  621,  754,
      625, 1002,  625, 1002,  629,  780,  629,  630,  629,  415,
      629,  630,  414,  658,  492,  413,  492,  659,  649,  412,
      486,  486,  660,  660,  660,  660,  660,  660,  660,  369,
      411,  369,  373,  647,  491,  486,  410,  374,  374,  374,
      374,  374,  374,  374,  369,  409,  369,  373,  491,  678,
      408,  678,  374,  374,  374,  374,  374,  374,  374,  675,
      407,  675,  786,  792,  682,  792,  682,  682,  684,  682,
      684,  684,  686,  684,  686,  406,  661,  377,  404,  377,
      378,  402,  353,  124,  379,  380,  380,  380,  380,  380,

      380,  380,  506,  352,  506,  662,  349,  348,  124,  379,
      663,  663,  663,  663,  663,  663,  663,  369,  347,  369,
      665,  686,  472,  686,  346,  666,  666,  666,  666,  666,
      666,  666,  369,  345,  369,  668,  688,  472,  688,  344,
      669,  669,  669,  669,  669,  669,  669,  377,  343,  377,
      671,  342,  472,  124,  672,  673,  673,  673,  673,  673,
      673,  673,  675,  341,  675,  676,  340,  339,  124,  521,
      677,  677,  677,  677,  677,  677,  677,  377,  334,  377,
      503,  688,  690,  688,  690,  505,  505,  505,  505,  505,
      505,  505,  657,  657,  657,  657,  657,  657,  657,  119,

      690,  119,  690,  692,  692,  692,  692,  120,  120,  120,
      120,  120,  120,  120,  694,  694,  694,  694,  696,  696,
      696,  696,  757,  357,  333,  357,  358,  698,  698,  698,
      698,  359,  359,  359,  359,  359,  359,  359,  700,  700,
      700,  700,  706,  706,  706,  706,  708,  708,  708,  708,
      710,  710,  710,  710,  712,  332,  712,  761,  357,  329,
      357,  358,  712,  714,  712,  714,  359,  359,  359,  359,
      359,  359,  359,  714,  716,  714,  716,  763,  477,  328,
      477,  478,  716,  724,  716,  724,  764,  764,  764,  764,
      764,  764,  764,  766,  766,  766,  766,  766,  766,  766,

      483,  327,  483,  484,  324,  323,  124,  366,  768,  768,
      768,  768,  768,  768,  768,  629,  322,  629,  771,  724,
      472,  724,  321,  772,  772,  772,  772,  772,  772,  772,
      369,  320,  369,  487,  726,  472,  726,  319,  488,  488,
      488,  488,  488,  488,  488,  726,  728,  726,  728,  728,
      730,  728,  730,  730,  732,  730,  732,  732,  734,  732,
      734,  734,  316,  734,  773,  369,  315,  369,  487,  736,
      472,  736,  314,  488,  488,  488,  488,  488,  488,  488,
      736,  738,  736,  738,  775,  492,  311,  492,  493,  738,
      472,  738,  310,  776,  776,  776,  776,  776,  776,  776,

      357,  309,  357,  650,  740,  472,  740,  306,  651,  651,
      651,  651,  651,  651,  651,  357,  305,  357,  650,  740,
      472,  740,  304,  651,  651,  651,  651,  651,  651,  651,
      742,  742,  742,  742,  744,  744,  744,  744,  746,  746,
      746,  746,  748,  748,  748,  748,  303,  777,  477,  298,
      477,  778,  750,  472,  750,  297,  779,  779,  779,  779,
      779,  779,  779,  782,  782,  782,  782,  782,  782,  782,
      506,  296,  506,  507,  295,  472,  124,  504,  784,  784,
      784,  784,  784,  784,  784,  648,  648,  648,  648,  648,
      648,  648,  369,  294,  369,  497,  750,  472,  750,  293,

      498,  498,  498,  498,  498,  498,  498,  752,  752,  752,
      752,  754,  754,  754,  754,  629,  844,  629,  630,  649,
      792,  843,  792,  292,  656,  506,  291,  506,  507,  649,
      472,  124,  504,  657,  657,  657,  657,  657,  657,  657,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  369,  290,  369,  497,  289,  472,
      846,  286,  498,  498,  498,  498,  498,  498,  498,  377,
      283,  377,  503,  649,  792,  259,  792,  505,  505,  505,
      505,  505,  505,  505,  508,  508,  508,  508,  508,  508,
      508,  369,  258,  369,  665,  853,  472,  853,  187,  666,

      666,  666,  666,  666,  666,  666,  629,  186,  629,  630,
      785,  369,  185,  369,  668,  168,  472,  846,  158,  669,
      669,  669,  669,  669,  669,  669,  629,  157,  629,  771,
      649,  472,  649,  649,  869,  870,  649,  792,  871,  792,
      156,  151,  875,  787,  506,  150,  506,  788,  149,  472,
      124,  672,  789,  789,  789,  789,  789,  789,  789,  119,
      853,  119,  853,  877,  826,  877,  144,  120,  120,  120,
      120,  120,  120,  120,  357,  143,  357,  358,  879,  649,
      879,  898,  359,  359,  359,  359,  359,  359,  359,  857,
      142,  857,  474,  649,  792,  899,  792,  139,  877,  875,

      877,  877,  879,  877,  879,  905,  138,  905,  830,  357,
      137,  357,  358,  629,  136,  629,  907,  359,  359,  359,
      359,  359,  359,  359,  634,  910,  356,  910,  886,  135,
      886,  474,  647, 1002,  486, 1002,  905,  629,  905,  629,
      907,  134,  133,  832,  477,  132,  477,  478,  910,  634,
      910,  356,  764,  764,  764,  764,  764,  764,  764,  834,
      834,  834,  834,  834,  834,  834,  483,  121,  483,  484,
       90,   89,  124,  366,  768,  768,  768,  768,  768,  768,
      768,  629,   88,  629,  771,  629,  472,  629,  940,  837,
      837,  837,  837,  837,  837,  837,  369,   86,  369,  487,

      915,  472,  915,  474,  488,  488,  488,  488,  488,  488,
      488,  647,  629,  486,  629,  907,  629,   81,  629,  940,
      629,   79,  629,  971,  634,  647,  356,  486,   78,   77,
      838,  369,   76,  369,  487,  629,  472,  629,  907,  488,
      488,  488,  488,  488,  488,  488,  629,   75,  629,  940,
      629,   74,  629,  971,  917,  629,  472,  629,  949,  629,
      472,  629,  940,   73,   70,  840,  492,   63,  492,  493,
      629,  472,  629,  971,  776,  776,  776,  776,  776,  776,
      776,  357,   62,  357,  650,  947,  472,  472,   61,  651,
      651,  651,  651,  651,  651,  651,  952,   58,  472,   57,

      780,  357,   38,  357,  650,  629,  472,  629,  971,  651,
      651,  651,  651,  651,  651,  651,  629,   37,  629,  978,
      629,  472,  629,  997,   34,  472,   33,   32,   29,   28,
       27,   26,   25,  841,  477,   24,  477,  778,   21,  472,
       20,   19,  842,  842,  842,  842,  842,  842,  842,  845,
      845,  845,  845,  845,  845,  845,  506, 1002,  506,  507,
     1002,  472,  124,  504,  784,  784,  784,  784,  784,  784,
      784,  369, 1002,  369,  497, 1002,  472, 1002, 1002,  498,
      498,  498,  498,  498,  498,  498, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,

     1002, 1002, 1002,  656,  506, 1002,  506,  507, 1002,  472,
      124,  504,  849,  849,  849,  849,  849,  849,  849,  857,
     1002,  857,  358, 1002, 1002, 1002, 1002,  858,  858,  858,
      858,  858,  858,  858,  357, 1002,  357,  358, 1002, 1002,
     1002, 1002,  359,  359,  359,  359,  359,  359,  359, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,  860,  477,
     1002,  477,  478, 1002, 1002, 1002, 1002,  635,  635,  635,
      635,  635,  635,  635,  864, 1002,  864, 1002, 1002, 1002,
     1002, 1002,  865,  865,  865,  865,  865,  865,  865, 1002,

     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,  486,  868,
      868,  868,  868,  868,  868,  868,  657,  657,  657,  657,
      657,  657,  657,  883, 1002, 1002, 1002, 1002,  884,  884,
      884,  884,  884,  884,  884,  886, 1002,  886,  358, 1002,
     1002, 1002, 1002,  887,  887,  887,  887,  887,  887,  887,
      879, 1002,  879, 1002, 1002,  472, 1002, 1002,  889,  889,
      889,  889,  889,  889,  889,  864, 1002,  864,  489, 1002,
     1002, 1002, 1002,  891,  891,  891,  891,  891,  891,  891,
      492, 1002,  492,  892, 1002, 1002, 1002, 1002,  893,  893,

      893,  893,  893,  893,  893,  895, 1002,  895, 1002, 1002,
     1002, 1002, 1002,  896,  896,  896,  896,  896,  896,  896,
      868,  868,  868,  868,  868,  868,  868,  857, 1002,  857,
      650, 1002, 1002, 1002, 1002,  897,  897,  897,  897,  897,
      897,  897,  909,  909,  909,  909,  909,  909,  909,  913,
     1002, 1002, 1002, 1002,  914,  914,  914,  914,  914,  914,
      914,  915, 1002,  915, 1002, 1002, 1002, 1002, 1002,  916,
      916,  916,  916,  916,  916,  916,  917, 1002,  472, 1002,
     1002,  918,  918,  918,  918,  918,  918,  918,  905, 1002,
      905, 1002, 1002, 1002, 1002, 1002,  919,  919,  919,  919,

      919,  919,  919,  629, 1002,  629,  920, 1002, 1002, 1002,
     1002,  921,  921,  921,  921,  921,  921,  921,  922,  922,
      922,  922,  922,  922,  922,  910, 1002,  910, 1002, 1002,
     1002, 1002, 1002,  923,  923,  923,  923,  923,  923,  923,
      895, 1002,  895,  489, 1002, 1002, 1002, 1002,  924,  924,
      924,  924,  924,  924,  924,  925, 1002, 1002, 1002, 1002,
      926,  926,  926,  926,  926,  926,  926,  927, 1002, 1002,
     1002, 1002,  928,  928,  928,  928,  928,  928,  928,  915,
     1002,  915, 1002, 1002, 1002, 1002, 1002,  929,  929,  929,
      929,  929,  929,  929,  886, 1002,  886, 1002, 1002, 1002,

     1002, 1002,  930,  930,  930,  930,  930,  930,  930,  931,
     1002,  931, 1002, 1002, 1002, 1002, 1002,  932,  932,  932,
      932,  932,  932,  932,  937,  937,  937,  937,  937,  937,
      937,  942,  942,  942,  942,  942,  942,  942,  944, 1002,
     1002, 1002, 1002,  945,  945,  945,  945,  945,  945,  945,
      946,  946,  946,  946,  946,  946,  946,  947, 1002, 1002,
     1002, 1002,  948,  948,  948,  948,  948,  948,  948,  629,
     1002,  629,  949, 1002, 1002, 1002, 1002,  950,  950,  950,
      950,  950,  950,  950,  951,  951,  951,  951,  951,  951,
      951,  952, 1002, 1002, 1002, 1002,  953,  953,  953,  953,

      953,  953,  953,  629, 1002,  629,  954, 1002, 1002, 1002,
     1002,  955,  955,  955,  955,  955,  955,  955,  956,  956,
      956,  956,  956,  956,  956,  357, 1002,  357, 1002, 1002,
     1002, 1002, 1002,  651,  651,  651,  651,  651,  651,  651,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002,  841,  957,  957,
      957,  957,  957,  957,  957,  958, 1002, 1002, 1002, 1002,
      959,  959,  959,  959,  959,  959,  959,  960, 1002, 1002,
     1002, 1002,  961,  961,  961,  961,  961,  961,  961,  931,
     1002,  931, 1002, 1002, 1002, 1002, 1002,  962,  962,  962,

      962,  962,  962,  962,  963, 1002, 1002, 1002, 1002,  964,
      964,  964,  964,  964,  964,  964,  764,  764,  764,  764,
      764,  764,  764,  970,  970,  970,  970,  970,  970,  970,
      973,  973,  973,  973,  973,  973,  973,  974,  974,  974,
      974,  974,  974,  974,  975,  975,  975,  975,  975,  975,
      975,  976,  976,  976,  976,  976,  976,  976,  776,  776,
      776,  776,  776,  776,  776,  977,  977,  977,  977,  977,
      977,  977,  978, 1002, 1002, 1002, 1002,  979,  979,  979,
      979,  979,  979,  979,  980,  980,  980,  980,  980,  980,
      980,  981,  981,  981,  981,  981,  981,  981,  982,  982,

      982,  982,  982,  982,  982,  983,  983,  983,  983,  983,
      983,  983,  984, 1002, 1002, 1002, 1002,  985,  985,  985,
      985,  985,  985,  985,  986,  986,  986,  986,  986,  986,
      986,  991,  991,  991,  991,  991,  991,  991,  992,  992,
      992,  992,  992,  992,  992,  993,  993,  993,  993,  993,
      993,  993,  994,  994,  994,  994,  994,  994,  994,  776,
      776,  776,  776,  776,  776,  776,  868,  868,  868,  868,
      868,  868,  868,  995,  995,  995,  995,  995,  995,  995,
      996,  996,  996,  996,  996,  996,  996,  997, 1002, 1002,
     1002, 1002,  998,  998,  998,  998,  998,  998,  998,  999,

      999,  999,  999,  999,  999,  999,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
     1001, 1001, 1001, 1001, 1001, 1001, 1001,  776,  776,  776,
      776,  776,  776,  776,    4,    4,    4,    4,    4,    4,
        4,    4,    4,   40, 1002, 1002, 1002,   40,   40,   40,
       42, 1002, 1002, 1002,   42,   42,   42,   44, 1002, 1002,
     1002,   44,   44,   44,   54, 1002, 1002,   54, 1002, 1002,
       54,   54,   54,   60, 1002, 1002, 1002, 1002, 1002,   60,
       65, 1002, 1002, 1002,   65,   65,   65,   67, 1002, 1002,
     1002,   67,   67,   67,   69, 1002, 1002, 1002,   69,   69,

       69,   80, 1002, 1002,   80, 1002, 1002,   80,   80,   80,
       83, 1002, 1002, 1002, 1002, 1002,   83,   91, 1002, 1002,
     1002,   91,   91,   91,   92, 1002, 1002, 1002,   92,   92,
       92,   93, 1002, 1002, 1002,   93,   93,   93,  100, 1002,
     1002, 1002,  100,  100,  100,  115, 1002, 1002, 1002,  115,
      115,  115,  117, 1002, 1002, 1002,  117,  117,  117,  118,
      118, 1002,  118, 1002, 1002,  118,  118,  118,  122,  122,
     1002,  122, 1002,  122,  122,  122,  122,  128, 1002, 1002,
     1002, 1002, 1002,  128,  130, 1002, 1002, 1002,  130,  130,
      130,  141, 1002, 1002, 1002,  141,  141,  141,  160, 1002,

     1002, 1002,  160,  160,  160,  162, 1002, 1002, 1002,  162,
      162,  162,  163, 1002, 1002, 1002, 1002, 1002,  163,  169,
     1002, 1002,  169, 1002, 1002,  169,  169,  169,  170,  170,
     1002,  170, 1002,  170,  170,  170,  170,  173,  173, 1002,
      173, 1002,  173,  173,  173,  173,  175,  175, 1002,  175,
     1002,  175,  175,  175,  175,  179,  179, 1002,  179, 1002,
     1002,  179,  179,  179,  183, 1002, 1002, 1002,  183,  183,
      183,  189, 1002, 1002, 1002,  189,  189,  189,  201, 1002,
     1002, 1002,  201,  201,  201,  203, 1002, 1002, 1002,  203,
      203,  203,  204, 1002, 1002, 1002,  204,  204,  204,  210,

     1002, 1002, 1002,  210,  210,  210,  215, 1002, 1002, 1002,
      215,  215,  215,  220, 1002, 1002, 1002,  220,  220,  220,
      228, 1002, 1002, 1002,  228,  228,  228,  233, 1002, 1002,
     1002,  233,  233,  233,  238, 1002, 1002, 1002,  238,  238,
      238,  240, 1002, 1002, 1002,  240,  240,  240,  251, 1002,
     1002, 1002,  251,  251,  251,  252, 1002, 1002, 1002,  252,
      252,  252,  254, 1002, 1002,  254, 1002, 1002,  254,  254,
      257, 1002, 1002, 1002,  257,  257,  257,  260,  260, 1002,
      260, 1002, 1002,  260,  260,  260,  262, 1002, 1002,  262,
     1002, 1002,  262,  262,  262,  263,  263, 1002,  263, 1002,

      263,  263,  263,  263,  265,  265, 1002,  265, 1002, 1002,
      265,  265,  265,  266,  266, 1002,  266, 1002,  266,  266,
      266,  266,  269,  269, 1002,  269, 1002, 1002,  269,  269,
      269,  270,  270, 1002,  270, 1002,  270,  270,  270,  270,
      272,  272, 1002,  272, 1002,  272,  272,  272,  272,  274,
      274, 1002,  274, 1002,  274,  274,  274,  274,  278, 1002,
     1002,  278, 1002, 1002,  278,  278,  278,  279,  279, 1002,
      279, 1002, 1002,  279,  279,  279,  280, 1002, 1002, 1002,
      280,  280,  280,  282, 1002, 1002, 1002,  282,  282,  282,
      285, 1002, 1002, 1002, 1002, 1002,  285,  288, 1002, 1002,

     1002,  288,  288,  288,  300, 1002, 1002, 1002,  300,  300,
      300,  302, 1002, 1002, 1002,  302,  302,  302,  308, 1002,
     1002, 1002,  308,  308,  308,  313, 1002, 1002, 1002,  313,
      313,  313,  318, 1002, 1002, 1002,  318,  318,  318,  326,
     1002, 1002, 1002,  326,  326,  326,  331, 1002, 1002, 1002,
      331,  331,  331,  336, 1002, 1002, 1002,  336,  336,  336,
      338, 1002, 1002, 1002,  338,  338,  338,  351, 1002, 1002,
     1002,  351,  351,  351,  354,  354, 1002,  354, 1002, 1002,
      354,  354,  354,  355,  355, 1002,  355, 1002, 1002,  355,
      355,  355,  356,  356, 1002,  356, 1002, 1002,  356,  356,

      356,  360,  360, 1002,  360, 1002, 1002,  360,  360,  360,
      363,  363, 1002,  363, 1002,  363,  363,  363,  363,  368,
      368, 1002,  368, 1002, 1002,  368,  368,  368,  372,  372,
     1002,  372, 1002, 1002,  372,  372,  372,  375,  375, 1002,
      375, 1002, 1002,  375,  375,  375,  376,  376, 1002,  376,
     1002,  376,  376,  376,  376,  381, 1002, 1002,  381, 1002,
     1002,  381,  381,  381,  382,  382, 1002,  382, 1002,  382,
      382,  382,  382,  384,  384, 1002,  384, 1002, 1002,  384,
      384,  384,  387,  387, 1002,  387, 1002,  387,  387,  387,
      387,  389,  389, 1002,  389, 1002,  389,  389,  389,  389,

      393,  393, 1002,  393, 1002,  393,  393,  393,  393,  398,
     1002, 1002,  398, 1002, 1002,  398,  398,  398,  399, 1002,
     1002,  399, 1002, 1002,  399,  399,  399,  401, 1002, 1002,
     1002,  401,  401,  401,  282, 1002, 1002, 1002,  282,  282,
      282,  285, 1002, 1002, 1002, 1002, 1002,  285,  405, 1002,
     1002, 1002,  405,  405,  405,  288, 1002, 1002, 1002,  288,
      288,  288,  416, 1002, 1002, 1002,  416,  416,  416,  300,
     1002, 1002, 1002,  300,  300,  300,  417, 1002, 1002, 1002,
      417,  417,  417,  302, 1002, 1002, 1002,  302,  302,  302,
      419, 1002, 1002, 1002,  419,  419,  419,  421, 1002, 1002,

     1002,  421,  421,  421,  423, 1002, 1002, 1002,  423,  423,
      423,  425, 1002, 1002, 1002,  425,  425,  425,  426, 1002,
     1002, 1002,  426,  426,  426,  308, 1002, 1002, 1002,  308,
      308,  308,  430, 1002, 1002, 1002,  430,  430,  430,  313,
     1002, 1002, 1002,  313,  313,  313,  434, 1002, 1002, 1002,
      434,  434,  434,  318, 1002, 1002, 1002,  318,  318,  318,
      436, 1002, 1002, 1002,  436,  436,  436,  438, 1002, 1002,
     1002,  438,  438,  438,  440, 1002, 1002, 1002,  440,  440,
      440,  442, 1002, 1002, 1002,  442,  442,  442,  444, 1002,
     1002, 1002,  444,  444,  444,  446, 1002, 1002, 1002,  446,

      446,  446,  447, 1002, 1002, 1002,  447,  447,  447,  326,
     1002, 1002, 1002,  326,  326,  326,  451, 1002, 1002, 1002,
      451,  451,  451,  331, 1002, 1002, 1002,  331,  331,  331,
      455, 1002, 1002, 1002,  455,  455,  455,  336, 1002, 1002,
     1002,  336,  336,  336,  456, 1002, 1002, 1002,  456,  456,
      456,  338, 1002, 1002, 1002,  338,  338,  338,  468, 1002,
     1002, 1002,  468,  468,  468,  351, 1002, 1002, 1002,  351,
      351,  351,  118,  118, 1002,  118, 1002, 1002,  118,  118,
      118,  471,  471, 1002,  471,  471, 1002,  471,  471,  471,
      473, 1002, 1002,  473, 1002, 1002,  473,  473,  473,  356,

      356, 1002,  356, 1002, 1002,  356,  356,  356,  475, 1002,
      475, 1002, 1002, 1002,  475,  360,  360, 1002,  360, 1002,
     1002,  360,  360,  360,  170,  170, 1002,  170, 1002, 1002,
      170,  170,  170,  363,  363, 1002,  363, 1002,  363,  363,
      363,  363,  486,  486, 1002,  486,  486, 1002,  486,  486,
      486,  355,  355, 1002,  355, 1002, 1002,  355,  355,  355,
      495, 1002, 1002,  495, 1002, 1002,  495,  495,  495,  496,
      496, 1002,  496,  496, 1002,  496,  496,  496,  375,  375,
     1002,  375, 1002, 1002,  375,  375,  375,  502,  502, 1002,
      502,  502,  502,  502,  502,  502,  509,  509, 1002,  509,

     1002, 1002,  509,  509,  509,  512,  512, 1002,  512, 1002,
     1002,  512,  512,  512,  515,  515, 1002,  515, 1002,  515,
      515,  515,  515,  519, 1002, 1002,  519, 1002, 1002,  519,
      519,  519,  520,  520, 1002,  520, 1002,  520,  520,  520,
      520,  522,  522, 1002,  522,  522, 1002,  522,  522,  522,
      387,  387, 1002,  387, 1002,  387,  387,  387,  387,  528,
      528, 1002,  528,  528,  528,  528,  528,  528,  398, 1002,
     1002,  398, 1002, 1002,  398,  398,  398,  534, 1002, 1002,
     1002,  534,  534,  534,  401, 1002, 1002, 1002,  401,  401,
      401,  537,  537, 1002,  537, 1002, 1002,  537,  537,  537,

      405,  405,  405,  540, 1002, 1002, 1002,  540,  540,  540,
      542, 1002, 1002, 1002,  542,  542,  542,  544, 1002, 1002,
     1002,  544,  544,  544,  546, 1002, 1002, 1002,  546,  546,
      546,  548, 1002, 1002, 1002,  548,  548,  548,  550, 1002,
     1002, 1002,  550,  550,  550,  552, 1002, 1002, 1002,  552,
      552,  552,  554, 1002, 1002, 1002,  554,  554,  554,  556,
     1002, 1002, 1002,  556,  556,  556,  558, 1002, 1002, 1002,
      558,  558,  558,  416,  416,  416,  417,  417,  417,  419,
     1002, 1002, 1002,  419,  419,  419,  560, 1002, 1002, 1002,
      560,  560,  560,  421, 1002, 1002, 1002,  421,  421,  421,

      562, 1002, 1002, 1002,  562,  562,  562,  423, 1002, 1002,
     1002,  423,  423,  423,  564, 1002, 1002, 1002,  564,  564,
      564,  425, 1002, 1002, 1002,  425,  425,  425,  566, 1002,
     1002, 1002,  566,  566,  566,  426,  426,  426,  568, 1002,
     1002, 1002,  568,  568,  568,  570, 1002, 1002, 1002,  570,
      570,  570,  572, 1002, 1002, 1002,  572,  572,  572,  430,
      430,  430,  574, 1002, 1002, 1002,  574,  574,  574,  576,
     1002, 1002, 1002,  576,  576,  576,  578, 1002, 1002, 1002,
      578,  578,  578,  434,  434,  434,  436, 1002, 1002, 1002,
      436,  436,  436,  580, 1002, 1002, 1002,  580,  580,  580,

      438, 1002, 1002, 1002,  438,  438,  438,  582, 1002, 1002,
     1002,  582,  582,  582,  440, 1002, 1002, 1002,  440,  440,
      440,  584, 1002, 1002, 1002,  584,  584,  584,  442, 1002,
     1002, 1002,  442,  442,  442,  586, 1002, 1002, 1002,  586,
      586,  586,  444, 1002, 1002, 1002,  444,  444,  444,  588,
     1002, 1002, 1002,  588,  588,  588,  446, 1002, 1002, 1002,
      446,  446,  446,  590, 1002, 1002, 1002,  590,  590,  590,
      447,  447,  447,  592, 1002, 1002, 1002,  592,  592,  592,
      594, 1002, 1002, 1002,  594,  594,  594,  596, 1002, 1002,
     1002,  596,  596,  596,  451,  451,  451,  598, 1002, 1002,

     1002,  598,  598,  598,  600, 1002, 1002, 1002,  600,  600,
      600,  602, 1002, 1002, 1002,  602,  602,  602,  455,  455,
      455,  456,  456,  456,  604, 1002, 1002, 1002,  604,  604,
      604,  606, 1002, 1002, 1002,  606,  606,  606,  608, 1002,
     1002, 1002,  608,  608,  608,  610, 1002, 1002, 1002,  610,
      610,  610,  612, 1002, 1002, 1002,  612,  612,  612,  614,
     1002, 1002, 1002,  614,  614,  614,  616, 1002, 1002, 1002,
      616,  616,  616,  618, 1002, 1002, 1002,  618,  618,  618,
      620, 1002, 1002, 1002,  620,  620,  620,  622, 1002, 1002,
     1002,  622,  622,  622,  468,  468,  468,  118,  118, 1002,

      118, 1002, 1002,  118,  118,  118,  626, 1002, 1002, 1002,
      626,  626,  626,  471,  471, 1002,  471,  471, 1002,  471,
      471,  471,  627, 1002, 1002,  627,  627, 1002,  627,  627,
      627,  631, 1002,  631, 1002, 1002, 1002,  631,  356,  356,
     1002,  356, 1002, 1002,  356,  356,  356,  475, 1002,  475,
     1002, 1002, 1002,  475,  262, 1002, 1002,  262, 1002, 1002,
      262,  262,  262,  170,  170, 1002,  170, 1002, 1002,  170,
      170,  170,  360,  360, 1002,  360, 1002, 1002,  360,  360,
      360,  363,  363, 1002,  363, 1002,  363,  363,  363,  363,
      486,  486, 1002,  486,  486, 1002,  486,  486,  486,  473,

     1002, 1002,  473, 1002, 1002,  473,  473,  473,  355,  355,
     1002,  355, 1002, 1002,  355,  355,  355,  649,  649, 1002,
      649,  649, 1002,  649,  649,  649,  495, 1002, 1002,  495,
     1002, 1002,  495,  495,  495,  496,  496, 1002,  496,  496,
     1002,  496,  496,  496,  502,  502, 1002,  502,  502,  502,
      502,  502,  502,  375,  375, 1002,  375, 1002, 1002,  375,
      375,  375,  368,  368, 1002,  368, 1002, 1002,  368,  368,
      368,  372,  372, 1002,  372, 1002, 1002,  372,  372,  372,
      376,  376, 1002,  376, 1002,  376,  376,  376,  376,  664,
      664, 1002,  664,  664, 1002,  664,  664,  664,  667,  667,

     1002,  667,  667, 1002,  667,  667,  667,  670,  670, 1002,
      670,  670,  670,  670,  670,  670,  519, 1002, 1002,  519,
     1002, 1002,  519,  519,  519,  520,  520, 1002,  520, 1002,
      520,  520,  520,  520,  534,  534,  534,  679, 1002, 1002,
     1002, 1002, 1002,  679,  681, 1002, 1002,  681, 1002, 1002,
      681,  681,  681,  537,  537, 1002,  537, 1002, 1002,  537,
      537,  537,  540, 1002, 1002, 1002,  540,  540,  540,  683,
     1002, 1002, 1002,  683,  683,  683,  542, 1002, 1002, 1002,
      542,  542,  542,  685, 1002, 1002, 1002,  685,  685,  685,
      544, 1002, 1002, 1002,  544,  544,  544,  687, 1002, 1002,

     1002,  687,  687,  687,  546, 1002, 1002, 1002,  546,  546,
      546,  689, 1002, 1002, 1002,  689,  689,  689,  548, 1002,
     1002, 1002,  548,  548,  548,  691, 1002, 1002, 1002,  691,
      691,  691,  550, 1002, 1002, 1002,  550,  550,  550,  693,
     1002, 1002, 1002,  693,  693,  693,  552, 1002, 1002, 1002,
      552,  552,  552,  695, 1002, 1002, 1002,  695,  695,  695,
      554, 1002, 1002, 1002,  554,  554,  554,  697, 1002, 1002,
     1002,  697,  697,  697,  556, 1002, 1002, 1002,  556,  556,
      556,  699, 1002, 1002, 1002,  699,  699,  699,  558, 1002,
     1002, 1002,  558,  558,  558,  701, 1002, 1002, 1002,  701,

      701,  701,  702, 1002, 1002, 1002,  702,  702,  702,  560,
     1002, 1002, 1002,  560,  560,  560,  703, 1002, 1002, 1002,
      703,  703,  703,  562, 1002, 1002, 1002,  562,  562,  562,
      704, 1002, 1002, 1002,  704,  704,  704,  564, 1002, 1002,
     1002,  564,  564,  564,  705, 1002, 1002, 1002,  705,  705,
      705,  566, 1002, 1002, 1002,  566,  566,  566,  568, 1002,
     1002, 1002,  568,  568,  568,  707, 1002, 1002, 1002,  707,
      707,  707,  570, 1002, 1002, 1002,  570,  570,  570,  709,
     1002, 1002, 1002,  709,  709,  709,  572, 1002, 1002, 1002,
      572,  572,  572,  711, 1002, 1002, 1002,  711,  711,  711,

      574, 1002, 1002, 1002,  574,  574,  574,  713, 1002, 1002,
     1002,  713,  713,  713,  576, 1002, 1002, 1002,  576,  576,
      576,  715, 1002, 1002, 1002,  715,  715,  715,  578, 1002,
     1002, 1002,  578,  578,  578,  717, 1002, 1002, 1002,  717,
      717,  717,  718, 1002, 1002, 1002,  718,  718,  718,  580,
     1002, 1002, 1002,  580,  580,  580,  719, 1002, 1002, 1002,
      719,  719,  719,  582, 1002, 1002, 1002,  582,  582,  582,
      720, 1002, 1002, 1002,  720,  720,  720,  584, 1002, 1002,
     1002,  584,  584,  584,  721, 1002, 1002, 1002,  721,  721,
      721,  586, 1002, 1002, 1002,  586,  586,  586,  722, 1002,

     1002, 1002,  722,  722,  722,  588, 1002, 1002, 1002,  588,
      588,  588,  723, 1002, 1002, 1002,  723,  723,  723,  590,
     1002, 1002, 1002,  590,  590,  590,  592, 1002, 1002, 1002,
      592,  592,  592,  725, 1002, 1002, 1002,  725,  725,  725,
      594, 1002, 1002, 1002,  594,  594,  594,  727, 1002, 1002,
     1002,  727,  727,  727,  596, 1002, 1002, 1002,  596,  596,
      596,  729, 1002, 1002, 1002,  729,  729,  729,  598, 1002,
     1002, 1002,  598,  598,  598,  731, 1002, 1002, 1002,  731,
      731,  731,  600, 1002, 1002, 1002,  600,  600,  600,  733,
     1002, 1002, 1002,  733,  733,  733,  602, 1002, 1002, 1002,

      602,  602,  602,  735, 1002, 1002, 1002,  735,  735,  735,
      604, 1002, 1002, 1002,  604,  604,  604,  737, 1002, 1002,
     1002,  737,  737,  737,  606, 1002, 1002, 1002,  606,  606,
      606,  739, 1002, 1002, 1002,  739,  739,  739,  608, 1002,
     1002, 1002,  608,  608,  608,  741, 1002, 1002, 1002,  741,
      741,  741,  610, 1002, 1002, 1002,  610,  610,  610,  743,
     1002, 1002, 1002,  743,  743,  743,  612, 1002, 1002, 1002,
      612,  612,  612,  745, 1002, 1002, 1002,  745,  745,  745,
      614, 1002, 1002, 1002,  614,  614,  614,  747, 1002, 1002,
     1002,  747,  747,  747,  616, 1002, 1002, 1002,  616,  616,

      616,  749, 1002, 1002, 1002,  749,  749,  749,  618, 1002,
     1002, 1002,  618,  618,  618,  751, 1002, 1002, 1002,  751,
      751,  751,  620, 1002, 1002, 1002,  620,  620,  620,  753,
     1002, 1002, 1002,  753,  753,  753,  622, 1002, 1002, 1002,
      622,  622,  622,  755, 1002, 1002, 1002,  755,  755,  755,
      118,  118, 1002,  118, 1002, 1002,  118,  118,  118,  626,
     1002, 1002, 1002,  626,  626,  626,  627, 1002, 1002,  627,
      627, 1002,  627,  627,  627,  760, 1002,  760, 1002, 1002,
     1002,  760,  356,  356, 1002,  356, 1002, 1002,  356,  356,
      356,  262, 1002, 1002,  262, 1002, 1002,  262,  262,  262,

      363,  363, 1002,  363, 1002,  363,  363,  363,  363,  486,
      486, 1002,  486,  486, 1002,  486,  486,  486,  473, 1002,
     1002,  473, 1002, 1002,  473,  473,  473,  649,  649, 1002,
      649,  649, 1002,  649,  649,  649,  495, 1002, 1002,  495,
     1002, 1002,  495,  495,  495,  502,  502, 1002,  502,  502,
      502,  502,  502,  502,  496,  496, 1002,  496,  496, 1002,
      496,  496,  496,  664,  664, 1002,  664,  664, 1002,  664,
      664,  664,  170,  170, 1002,  170, 1002, 1002,  170,  170,
      170,  667,  667, 1002,  667,  667, 1002,  667,  667,  667,
      670,  670, 1002,  670,  670,  670,  670,  670,  670,  679,

     1002, 1002, 1002, 1002, 1002,  679,  791,  791, 1002,  791,
     1002, 1002,  791,  791,  791,  793, 1002, 1002, 1002,  793,
      793,  793,  683, 1002, 1002, 1002,  683,  683,  683,  794,
     1002, 1002, 1002,  794,  794,  794,  685, 1002, 1002, 1002,
      685,  685,  685,  795, 1002, 1002, 1002,  795,  795,  795,
      687, 1002, 1002, 1002,  687,  687,  687,  796, 1002, 1002,
     1002,  796,  796,  796,  689, 1002, 1002, 1002,  689,  689,
      689,  797, 1002, 1002, 1002,  797,  797,  797,  691, 1002,
     1002, 1002,  691,  691,  691,  798, 1002, 1002, 1002,  798,
      798,  798,  693, 1002, 1002, 1002,  693,  693,  693,  799,

     1002, 1002, 1002,  799,  799,  799,  695, 1002, 1002, 1002,
      695,  695,  695,  800, 1002, 1002, 1002,  800,  800,  800,
      697, 1002, 1002, 1002,  697,  697,  697,  801, 1002, 1002,
     1002,  801,  801,  801,  699, 1002, 1002, 1002,  699,  699,
      699,  802, 1002, 1002, 1002,  802,  802,  802,  701, 1002,
     1002, 1002,  701,  701,  701,  702,  702,  702,  703,  703,
      703,  704,  704,  704,  705,  705,  705,  803, 1002, 1002,
     1002,  803,  803,  803,  707, 1002, 1002, 1002,  707,  707,
      707,  804, 1002, 1002, 1002,  804,  804,  804,  709, 1002,
     1002, 1002,  709,  709,  709,  805, 1002, 1002, 1002,  805,

      805,  805,  711, 1002, 1002, 1002,  711,  711,  711,  806,
     1002, 1002, 1002,  806,  806,  806,  713, 1002, 1002, 1002,
      713,  713,  713,  807, 1002, 1002, 1002,  807,  807,  807,
      715, 1002, 1002, 1002,  715,  715,  715,  808, 1002, 1002,
     1002,  808,  808,  808,  717, 1002, 1002, 1002,  717,  717,
      717,  718,  718,  718,  719,  719,  719,  720,  720,  720,
      721,  721,  721,  722,  722,  722,  723,  723,  723,  809,
     1002, 1002, 1002,  809,  809,  809,  725, 1002, 1002, 1002,
      725,  725,  725,  810, 1002, 1002, 1002,  810,  810,  810,
      727, 1002, 1002, 1002,  727,  727,  727,  811, 1002, 1002,

     1002,  811,  811,  811,  729, 1002, 1002, 1002,  729,  729,
      729,  812, 1002, 1002, 1002,  812,  812,  812,  731, 1002,
     1002, 1002,  731,  731,  731,  813, 1002, 1002, 1002,  813,
      813,  813,  733, 1002, 1002, 1002,  733,  733,  733,  814,
     1002, 1002, 1002,  814,  814,  814,  735, 1002, 1002, 1002,
      735,  735,  735,  815, 1002, 1002, 1002,  815,  815,  815,
      737, 1002, 1002, 1002,  737,  737,  737,  816, 1002, 1002,
     1002,  816,  816,  816,  739, 1002, 1002, 1002,  739,  739,
      739,  817, 1002, 1002, 1002,  817,  817,  817,  741, 1002,
     1002, 1002,  741,  741,  741,  818, 1002, 1002, 1002,  818,

      818,  818,  743, 1002, 1002, 1002,  743,  743,  743,  819,
     1002, 1002, 1002,  819,  819,  819,  745, 1002, 1002, 1002,
      745,  745,  745,  820, 1002, 1002, 1002,  820,  820,  820,
      747, 1002, 1002, 1002,  747,  747,  747,  821, 1002, 1002,
     1002,  821,  821,  821,  749, 1002, 1002, 1002,  749,  749,
      749,  822, 1002, 1002, 1002,  822,  822,  822,  751, 1002,
     1002, 1002,  751,  751,  751,  823, 1002, 1002, 1002,  823,
      823,  823,  753, 1002, 1002, 1002,  753,  753,  753,  824,
     1002, 1002, 1002,  824,  824,  824,  755, 1002, 1002, 1002,
      755,  755,  755,  118,  118, 1002,  118,  118, 1002,  118,

      118,  118,  829, 1002,  829, 1002, 1002, 1002,  829,  356,
      356, 1002,  356, 1002, 1002,  356,  356,  356,  363,  363,
     1002,  363, 1002,  363,  363,  363,  363,  627, 1002, 1002,
      627,  627, 1002,  627,  627,  627,  486,  486, 1002,  486,
      486, 1002,  486,  486,  486,  649,  649, 1002,  649,  649,
     1002,  649,  649,  649,  502,  502, 1002,  502,  502,  502,
      502,  502,  502,  262, 1002, 1002,  262, 1002, 1002,  262,
      262,  262,  496,  496, 1002,  496,  496, 1002,  496,  496,
      496,  851,  851, 1002,  851, 1002, 1002,  851,  851,  851,
      852,  852, 1002,  852, 1002, 1002,  852,  852,  852,  793,

      793,  793,  794,  794,  794,  795,  795,  795,  796,  796,
      796,  797,  797,  797,  798,  798,  798,  799,  799,  799,
      800,  800,  800,  801,  801,  801,  802,  802,  802,  803,
      803,  803,  804,  804,  804,  805,  805,  805,  806,  806,
      806,  807,  807,  807,  808,  808,  808,  809,  809,  809,
      810,  810,  810,  811,  811,  811,  812,  812,  812,  813,
      813,  813,  814,  814,  814,  815,  815,  815,  816,  816,
      816,  817,  817,  817,  818,  818,  818,  819,  819,  819,
      820,  820,  820,  821,  821,  821,  822,  822,  822,  823,
      823,  823,  824,  824,  824,  854, 1002, 1002, 1002,  854,

      854,  854,  356,  356, 1002,  356, 1002, 1002,  356,  356,
      356,  627, 1002, 1002,  627,  627, 1002,  627,  627,  627,
      874,  874, 1002,  874,  874, 1002,  874,  874,  874,  876,
     1002, 1002,  876, 1002, 1002,  876,  876,  876,  878, 1002,
     1002, 1002,  878,  878,  878,  880, 1002, 1002, 1002, 1002,
     1002,  880,  882, 1002,  882, 1002, 1002, 1002,  882,  355,
      355, 1002,  355, 1002, 1002,  355,  355,  355,  901, 1002,
     1002,  901,  901, 1002,  901,  901,  901,  902, 1002, 1002,
     1002,  902,  902,  902,  904, 1002, 1002, 1002,  904,  906,
     1002, 1002, 1002, 1002, 1002,  906,  908, 1002,  908, 1002,

     1002, 1002,  908,  911, 1002, 1002, 1002, 1002, 1002,  911,
      912, 1002,  912, 1002, 1002, 1002,  912,  473,  473, 1002,
      473, 1002, 1002,  473,  473,  473,  933, 1002, 1002, 1002,
      933,  935, 1002, 1002, 1002,  935,  936, 1002,  936, 1002,
     1002, 1002,  936,  939, 1002, 1002, 1002,  939,  941, 1002,
      941, 1002, 1002, 1002,  941,  943, 1002,  943, 1002, 1002,
     1002,  943,  965, 1002, 1002, 1002,  965,  966, 1002, 1002,
     1002,  966,  967, 1002,  967, 1002, 1002, 1002,  967,  968,
     1002, 1002, 1002,  968,  969, 1002,  969, 1002, 1002, 1002,
      969,  972, 1002,  972, 1002, 1002, 1002,  972,  987, 1002,

     1002, 1002,  987,  988, 1002, 1002, 1002,  988,  989, 1002,
      989, 1002, 1002, 1002,  989,  990, 1002,  990, 1002, 1002,
     1002,  990, 1000, 1002, 1000, 1002, 1002, 1002, 1000,    3,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002
    } ;

static yyconst flex_int16_t yy_chk[7071] =
    {   0,
        0,    0,    1,    2,    0,    1,    2,    6,   18,  642,
       18,   18,   25,   26,   25,   26,   46,    7,    7,   46,
       27,    7,   27,  642,   11,    7,    7,   22,  770,    6,
        6,    6, 1478,    7,   22,   71,   11,    6,   29,    6,
       28,   28,  770,   29,   30,   28,   30,   30,   28,   32,
       71, 1440,   28,   28,   35,   28,   35,   39, 1354,   39,
       32,   40,   41,   40,   41,   42,   43,   42,   43,   44,
       56,   44,   56,   57,   59,   57,   59,   64,   65,   64,
       65,   66,   67,   66,   67,   68,   69,   68,   69,   70,
       72,   73,   72,   74,   75,   76,   73,  142,   77,   75,

       78,   57,   78, 1249, 1155,   74,   57,   76,   79,   70,
       79,   82,  142,   82,   70,   85,  143,   85,   77,   86,
       74,   86,   76,   77,   80, 1097,   80,   84,   91,   84,
       91,  143,   80,   80,   80,   80,   80,   80,   80,   83,
       92,   83,   92,  149,  149,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   93,   84,   93,   99,  149,   99,
       84,  100,  104,  100,  105,  104,  109,  105,  110,  109,
      114,  110,  114,  115,  116,  115,  116,  117, 1036,  117,
      118,  119,  118,  119,  127,  129,  127,  129,  118,  118,
      118,  118,  118,  118,  118,  120,  130,  120,  130,  135,

      120,  135, 1025,  120,  120,  120,  120,  120,  120,  120,
      136,  136,  136,  136,  136,  137,  137,  137,  137,  137,
      120,  123,  138,  123,  138,  150,  150,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  124,  139,  124,  139,
      150,  765,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  125,  140,  125,  140,  767,  765,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  126,  141,  126,  141,
      767, 1014,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  128,  144,  128,  144,  145,  145,  145,  991,  128,
      128,  128,  128,  128,  128,  128,  146,  482,  146,  147,

      147,  147,  148,  151,  148,  151,  152,  152,  152,  153,
      482,  153,  154,  154,  154,  155,  156,  155,  156,  157,
      157,  157,  157,  157,  158,  158,  158,  158,  158,  159,
      160,  159,  160,  161,  162,  161,  162,  163,  164,  163,
      164,  165,  163,  165,  169,  171,  169,  171,  173,  988,
      173,  171,  175,  180,  175,  180,  181,  182,  181,  182,
      987,  971,  163,  164,  172,  183,  172,  183,  787,  769,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  174,
      186,  174,  186,  787,  970,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  176,  188,  176,  188,  769,  774,

      176,  176,  176,  176,  176,  176,  176,  176,  176,  177,
      189,  177,  189,  774,  847,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  178,  200,  178,  200,  968,  847,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  201,
      202,  201,  202,  203,  204,  203,  204,  209,  210,  209,
      210,  214,  215,  214,  215,  219,  220,  219,  220,  227,
      228,  227,  228,  232,  233,  232,  233,  237,  238,  237,
      238,  239,  240,  239,  240,  251,  252,  251,  252,  253,
      254,  253,  254,  966,  256,  254,  256,  257,  260,  257,
      260,  261,  267,  261,  267,  280,  281,  280,  281,  282,

      284,  282,  284,  965,  253,  254,  262,  952,  262,  262,
      287,  288,  287,  288,  262,  262,  262,  262,  262,  262,
      262,  263,  947,  263,  263,  299,  300,  299,  300,  263,
      263,  263,  263,  263,  263,  263,  264,  940,  264,  264,
      643,  939,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  265,  935,  265,  265,  301,  302,  301,  302,  265,
      265,  265,  265,  265,  265,  265,  266,  643,  266,  266,
      303,  304,  303,  304,  266,  266,  266,  266,  266,  266,
      266,  268,  933,  268,  268,  917,  911,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  269,  907,  269,  269,

      305,  306,  305,  306,  269,  269,  269,  269,  269,  269,
      269,  271,  307,  271,  307,  771,  835,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  272,  906,  272,  272,
      308,  312,  308,  312,  272,  272,  272,  272,  272,  272,
      272,  273,  771,  273,  273,  835,  836,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  274,  904,  274,  274,
      313,  317,  313,  317,  274,  274,  274,  274,  274,  274,
      274,  275,  318,  275,  318,  836,  839,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  276,  901,  276,  276,
      880,  876,  276,  276,  276,  276,  276,  276,  276,  276,

      276,  277,  872,  277,  277,  839,  861,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  319,  320,  319,  320,
      321,  322,  321,  322,  323,  324,  323,  324,  325,  326,
      325,  326,  330,  331,  330,  331,  335,  336,  335,  336,
      337,  338,  337,  338,  350,  351,  350,  351,  352,  354,
      352,  354,  859,  400,  354,  400,  352,  352,  352,  352,
      352,  352,  352,  357,  863,  357,  357,  401,  404,  401,
      404,  406,  407,  406,  407,  856,  352,  356,  848,  356,
      356,  408,  409,  408,  409,  356,  356,  356,  356,  356,
      356,  356,  358,  863,  358,  358,  410,  411,  410,  411,

      358,  358,  358,  358,  358,  358,  358,  412,  413,  412,
      413,  414,  415,  414,  415,  418,  419,  418,  419,  420,
      421,  420,  421,  840,  358,  359,  833,  359,  359,  422,
      423,  422,  423,  359,  359,  359,  359,  359,  359,  359,
      363,  831,  363,  363,  424,  425,  424,  425,  363,  363,
      363,  363,  363,  363,  363,  364,  828,  364,  364,  427,
      428,  427,  428,  364,  364,  364,  364,  364,  364,  364,
      365,  827,  365,  365,  429,  431,  429,  431,  365,  365,
      365,  365,  365,  365,  365,  432,  433,  432,  433,  435,
      436,  435,  436,  437,  438,  437,  438,  439,  440,  439,

      440,  825,  365,  366,  786,  366,  366,  920,  785,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  367,  762,
      367,  367,  949,  759,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  368,  920,  368,  368,  441,  368,  441,
      758,  368,  368,  368,  368,  368,  368,  368,  369,  949,
      369,  369,  442,  443,  442,  443,  369,  369,  369,  369,
      369,  369,  369,  370,  756,  370,  370,  444,  370,  444,
      954,  370,  370,  370,  370,  370,  370,  370,  445,  446,
      445,  446,  448,  449,  448,  449,  450,  452,  450,  452,
      453,  454,  453,  454,  671,  370,  371,  954,  371,  371,

      457,  371,  457,  667,  371,  371,  371,  371,  371,  371,
      371,  376,  664,  376,  376,  458,  376,  458,  661,  376,
      376,  376,  376,  376,  376,  376,  377,  658,  377,  377,
      459,  460,  459,  460,  377,  377,  377,  377,  377,  377,
      377,  378,  655,  378,  378,  461,  378,  461,  653,  378,
      378,  378,  378,  378,  378,  378,  462,  463,  462,  463,
      464,  465,  464,  465,  466,  470,  466,  470,  646,  535,
      471,  535,  471,  378,  379,  471,  379,  379,  978,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  380,
      639,  380,  380,  984,  380,  380,  380,  380,  380,  380,

      380,  380,  380,  380,  381,  978,  381,  381,  475,  866,
      475,  475,  381,  381,  381,  381,  381,  381,  381,  382,
      984,  382,  382,  477,  636,  477,  477,  382,  382,  382,
      382,  382,  382,  382,  383,  633,  383,  383,  866,  491,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  388,
      630,  388,  491,  997,  628,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  391,  627,  391,  391,  623,  538,
      501,  538,  391,  391,  391,  391,  391,  391,  391,  393,
      997,  393,  393,  501,  393,  527,  637,  393,  393,  393,
      393,  393,  393,  393,  394,  532,  394,  394,  527,  637,

      394,  394,  394,  394,  394,  394,  394,  394,  394,  395,
      528,  395,  395,  539,  395,  539,  525,  395,  395,  395,
      395,  395,  395,  395,  540,  541,  540,  541,  542,  543,
      542,  543,  544,  545,  544,  545,  546,  547,  546,  547,
      522,  395,  396,  512,  396,  396,  507,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  397,  499,  397,
      397,  496,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  469,  548,  469,  548,  549,  550,  549,  550,
      469,  469,  469,  469,  469,  469,  469,  551,  552,  551,
      552,  553,  554,  553,  554,  555,  556,  555,  556,  469,

      476,  493,  476,  476,  557,  558,  557,  558,  476,  476,
      476,  476,  476,  476,  476,  559,  560,  559,  560,  476,
      478,  489,  478,  478,  561,  562,  561,  562,  478,  478,
      478,  478,  478,  478,  478,  563,  564,  563,  564,  565,
      566,  565,  566,  567,  568,  567,  568,  569,  570,  569,
      570,  480,  478,  479,  474,  479,  479,  571,  572,  571,
      572,  479,  479,  479,  479,  479,  479,  479,  481,  473,
      481,  481,  573,  574,  573,  574,  481,  481,  481,  481,
      481,  481,  481,  483,  467,  483,  483,  575,  576,  575,
      576,  483,  483,  483,  483,  483,  483,  483,  484,  402,

      484,  484,  577,  578,  577,  578,  484,  484,  484,  484,
      484,  484,  484,  579,  580,  579,  580,  581,  582,  581,
      582,  583,  584,  583,  584,  585,  586,  585,  586,  389,
      484,  485,  384,  485,  485,  372,  360,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  486,  353,  486,  486,
      587,  486,  587,  349,  486,  486,  486,  486,  486,  486,
      486,  487,  348,  487,  487,  588,  487,  588,  347,  487,
      487,  487,  487,  487,  487,  487,  589,  590,  589,  590,
      591,  592,  591,  592,  593,  594,  593,  594,  595,  596,
      595,  596,  346,  487,  488,  345,  488,  488,  597,  488,

      597,  344,  488,  488,  488,  488,  488,  488,  488,  490,
      343,  490,  490,  598,  599,  598,  599,  490,  490,  490,
      490,  490,  490,  490,  492,  342,  492,  492,  600,  601,
      600,  601,  492,  492,  492,  492,  492,  492,  492,  494,
      494,  494,  494,  494,  494,  494,  495,  341,  495,  495,
      602,  495,  602,  340,  495,  495,  495,  495,  495,  495,
      495,  500,  339,  500,  500,  603,  604,  603,  604,  500,
      500,  500,  500,  500,  500,  500,  502,  334,  502,  502,
      605,  502,  605,  333,  502,  502,  502,  502,  502,  502,
      502,  503,  332,  503,  503,  606,  503,  606,  329,  503,

      503,  503,  503,  503,  503,  503,  607,  608,  607,  608,
      609,  610,  609,  610,  611,  612,  611,  612,  613,  614,
      613,  614,  328,  503,  504,  327,  504,  504,  316,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  505,
      315,  505,  505,  314,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  506,  311,  506,  506,  615,  616,
      615,  616,  506,  506,  506,  506,  506,  506,  506,  508,
      508,  508,  508,  508,  508,  508,  509,  310,  509,  509,
      617,  618,  617,  618,  509,  509,  509,  509,  509,  509,
      509,  510,  309,  510,  510,  619,  620,  619,  620,  510,

      510,  510,  510,  510,  510,  510,  621,  622,  621,  622,
      625,  626,  625,  626,  629,  652,  629,  629,  631,  298,
      631,  631,  297,  510,  511,  296,  511,  511,  652,  295,
      659,  665,  511,  511,  511,  511,  511,  511,  511,  515,
      294,  515,  515,  659,  665,  668,  293,  515,  515,  515,
      515,  515,  515,  515,  516,  292,  516,  516,  668,  678,
      291,  678,  516,  516,  516,  516,  516,  516,  516,  675,
      290,  675,  675,  681,  682,  681,  682,  683,  684,  683,
      684,  685,  686,  685,  686,  289,  516,  517,  286,  517,
      517,  283,  259,  517,  517,  517,  517,  517,  517,  517,

      517,  517,  518,  258,  518,  518,  255,  250,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  519,  249,  519,
      519,  687,  519,  687,  248,  519,  519,  519,  519,  519,
      519,  519,  520,  247,  520,  520,  688,  520,  688,  246,
      520,  520,  520,  520,  520,  520,  520,  521,  245,  521,
      521,  244,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  526,  243,  526,  526,  242,  241,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  530,  236,  530,
      530,  689,  690,  689,  690,  530,  530,  530,  530,  530,
      530,  530,  533,  533,  533,  533,  533,  533,  533,  624,

      691,  624,  691,  692,  693,  692,  693,  624,  624,  624,
      624,  624,  624,  624,  694,  695,  694,  695,  696,  697,
      696,  697,  624,  632,  235,  632,  632,  698,  699,  698,
      699,  632,  632,  632,  632,  632,  632,  632,  700,  701,
      700,  701,  706,  707,  706,  707,  708,  709,  708,  709,
      710,  711,  710,  711,  712,  234,  712,  632,  634,  231,
      634,  634,  713,  714,  713,  714,  634,  634,  634,  634,
      634,  634,  634,  715,  716,  715,  716,  634,  635,  230,
      635,  635,  717,  724,  717,  724,  635,  635,  635,  635,
      635,  635,  635,  638,  638,  638,  638,  638,  638,  638,

      641,  229,  641,  641,  226,  225,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  644,  224,  644,  644,  725,
      644,  725,  223,  644,  644,  644,  644,  644,  644,  644,
      645,  222,  645,  645,  726,  645,  726,  221,  645,  645,
      645,  645,  645,  645,  645,  727,  728,  727,  728,  729,
      730,  729,  730,  731,  732,  731,  732,  733,  734,  733,
      734,  735,  218,  735,  645,  647,  217,  647,  647,  736,
      647,  736,  216,  647,  647,  647,  647,  647,  647,  647,
      737,  738,  737,  738,  647,  648,  213,  648,  648,  739,
      648,  739,  212,  648,  648,  648,  648,  648,  648,  648,

      649,  211,  649,  649,  740,  649,  740,  208,  649,  649,
      649,  649,  649,  649,  649,  650,  207,  650,  650,  741,
      650,  741,  206,  650,  650,  650,  650,  650,  650,  650,
      742,  743,  742,  743,  744,  745,  744,  745,  746,  747,
      746,  747,  748,  749,  748,  749,  205,  650,  651,  199,
      651,  651,  750,  651,  750,  198,  651,  651,  651,  651,
      651,  651,  651,  654,  654,  654,  654,  654,  654,  654,
      657,  197,  657,  657,  196,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  660,  660,  660,  660,  660,
      660,  660,  662,  195,  662,  662,  751,  662,  751,  194,

      662,  662,  662,  662,  662,  662,  662,  752,  753,  752,
      753,  754,  755,  754,  755,  760,  781,  760,  760,  780,
      791,  780,  791,  193,  662,  663,  192,  663,  663,  781,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      666,  666,  666,  666,  666,  666,  666,  669,  669,  669,
      669,  669,  669,  669,  670,  191,  670,  670,  190,  670,
      783,  187,  670,  670,  670,  670,  670,  670,  670,  672,
      185,  672,  672,  783,  792,  168,  792,  672,  672,  672,
      672,  672,  672,  672,  673,  673,  673,  673,  673,  673,
      673,  674,  167,  674,  674,  826,  674,  826,  134,  674,

      674,  674,  674,  674,  674,  674,  829,  133,  829,  829,
      674,  676,  132,  676,  676,  121,  676,  841,  113,  676,
      676,  676,  676,  676,  676,  676,  837,  112,  837,  837,
      841,  837,  843,  844,  843,  844,  846,  851,  846,  851,
      111,  108,  851,  676,  677,  107,  677,  677,  106,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  757,
      853,  757,  853,  854,  757,  854,  103,  757,  757,  757,
      757,  757,  757,  757,  761,  102,  761,  761,  855,  870,
      855,  870,  761,  761,  761,  761,  761,  761,  761,  857,
      101,  857,  857,  871,  874,  871,  874,   98,  877,  874,

      877,  878,  879,  878,  879,  881,   97,  881,  761,  763,
       96,  763,  763,  882,   95,  882,  882,  763,  763,  763,
      763,  763,  763,  763,  883,  885,  883,  885,  886,   94,
      886,  886,  892,  902,  892,  902,  905,  908,  905,  908,
      908,   90,   89,  763,  764,   88,  764,  764,  910,  913,
      910,  913,  764,  764,  764,  764,  764,  764,  764,  766,
      766,  766,  766,  766,  766,  766,  768,   81,  768,  768,
       63,   62,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  772,   61,  772,  772,  912,  772,  912,  912,  772,
      772,  772,  772,  772,  772,  772,  773,   58,  773,  773,

      915,  773,  915,  915,  773,  773,  773,  773,  773,  773,
      773,  925,  936,  925,  936,  936,  941,   55,  941,  941,
      943,   53,  943,  943,  944,  963,  944,  963,   52,   51,
      773,  775,   50,  775,  775,  967,  775,  967,  967,  775,
      775,  775,  775,  775,  775,  775,  969,   49,  969,  969,
      972,   48,  972,  972,  974,  976,  974,  976,  976,  989,
      976,  989,  989,   47,   45,  775,  776,   38,  776,  776,
      990,  776,  990,  990,  776,  776,  776,  776,  776,  776,
      776,  777,   37,  777,  777,  992,  777,  992,   36,  777,
      777,  777,  777,  777,  777,  777,  993,   34,  993,   33,

      777,  778,   24,  778,  778, 1000,  778, 1000, 1000,  778,
      778,  778,  778,  778,  778,  778,  994,   23,  994,  994,
     1001,  994, 1001, 1001,   21, 1001,   20,   19,   17,   16,
       15,   14,   13,  778,  779,   12,  779,  779,   10,  779,
        9,    8,  779,  779,  779,  779,  779,  779,  779,  782,
      782,  782,  782,  782,  782,  782,  784,    3,  784,  784,
        0,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  788,    0,  788,  788,    0,  788,    0,    0,  788,
      788,  788,  788,  788,  788,  788,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  788,  789,    0,  789,  789,    0,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  830,
        0,  830,  830,    0,    0,    0,    0,  830,  830,  830,
      830,  830,  830,  830,  832,    0,  832,  832,    0,    0,
        0,    0,  832,  832,  832,  832,  832,  832,  832,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  832,  834,
        0,  834,  834,    0,    0,    0,    0,  834,  834,  834,
      834,  834,  834,  834,  838,    0,  838,    0,    0,    0,
        0,    0,  838,  838,  838,  838,  838,  838,  838,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  838,  842,
      842,  842,  842,  842,  842,  842,  849,  849,  849,  849,
      849,  849,  849,  858,    0,    0,    0,    0,  858,  858,
      858,  858,  858,  858,  858,  860,    0,  860,  860,    0,
        0,    0,    0,  860,  860,  860,  860,  860,  860,  860,
      862,    0,  862,    0,    0,  862,    0,    0,  862,  862,
      862,  862,  862,  862,  862,  864,    0,  864,  864,    0,
        0,    0,    0,  864,  864,  864,  864,  864,  864,  864,
      865,    0,  865,  865,    0,    0,    0,    0,  865,  865,

      865,  865,  865,  865,  865,  867,    0,  867,    0,    0,
        0,    0,    0,  867,  867,  867,  867,  867,  867,  867,
      868,  868,  868,  868,  868,  868,  868,  869,    0,  869,
      869,    0,    0,    0,    0,  869,  869,  869,  869,  869,
      869,  869,  884,  884,  884,  884,  884,  884,  884,  887,
        0,    0,    0,    0,  887,  887,  887,  887,  887,  887,
      887,  888,    0,  888,    0,    0,    0,    0,    0,  888,
      888,  888,  888,  888,  888,  888,  889,    0,  889,    0,
        0,  889,  889,  889,  889,  889,  889,  889,  890,    0,
      890,    0,    0,    0,    0,    0,  890,  890,  890,  890,

      890,  890,  890,  891,    0,  891,  891,    0,    0,    0,
        0,  891,  891,  891,  891,  891,  891,  891,  893,  893,
      893,  893,  893,  893,  893,  894,    0,  894,    0,    0,
        0,    0,    0,  894,  894,  894,  894,  894,  894,  894,
      895,    0,  895,  895,    0,    0,    0,    0,  895,  895,
      895,  895,  895,  895,  895,  896,    0,    0,    0,    0,
      896,  896,  896,  896,  896,  896,  896,  897,    0,    0,
        0,    0,  897,  897,  897,  897,  897,  897,  897,  898,
        0,  898,    0,    0,    0,    0,    0,  898,  898,  898,
      898,  898,  898,  898,  899,    0,  899,    0,    0,    0,

        0,    0,  899,  899,  899,  899,  899,  899,  899,  900,
        0,  900,    0,    0,    0,    0,    0,  900,  900,  900,
      900,  900,  900,  900,  909,  909,  909,  909,  909,  909,
      909,  914,  914,  914,  914,  914,  914,  914,  916,    0,
        0,    0,    0,  916,  916,  916,  916,  916,  916,  916,
      918,  918,  918,  918,  918,  918,  918,  919,    0,    0,
        0,    0,  919,  919,  919,  919,  919,  919,  919,  921,
        0,  921,  921,    0,    0,    0,    0,  921,  921,  921,
      921,  921,  921,  921,  922,  922,  922,  922,  922,  922,
      922,  923,    0,    0,    0,    0,  923,  923,  923,  923,

      923,  923,  923,  924,    0,  924,  924,    0,    0,    0,
        0,  924,  924,  924,  924,  924,  924,  924,  926,  926,
      926,  926,  926,  926,  926,  927,    0,  927,    0,    0,
        0,    0,    0,  927,  927,  927,  927,  927,  927,  927,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  927,  928,  928,
      928,  928,  928,  928,  928,  929,    0,    0,    0,    0,
      929,  929,  929,  929,  929,  929,  929,  930,    0,    0,
        0,    0,  930,  930,  930,  930,  930,  930,  930,  931,
        0,  931,    0,    0,    0,    0,    0,  931,  931,  931,

      931,  931,  931,  931,  932,    0,    0,    0,    0,  932,
      932,  932,  932,  932,  932,  932,  937,  937,  937,  937,
      937,  937,  937,  942,  942,  942,  942,  942,  942,  942,
      945,  945,  945,  945,  945,  945,  945,  946,  946,  946,
      946,  946,  946,  946,  948,  948,  948,  948,  948,  948,
      948,  950,  950,  950,  950,  950,  950,  950,  951,  951,
      951,  951,  951,  951,  951,  953,  953,  953,  953,  953,
      953,  953,  955,    0,    0,    0,    0,  955,  955,  955,
      955,  955,  955,  955,  956,  956,  956,  956,  956,  956,
      956,  957,  957,  957,  957,  957,  957,  957,  959,  959,

      959,  959,  959,  959,  959,  961,  961,  961,  961,  961,
      961,  961,  962,    0,    0,    0,    0,  962,  962,  962,
      962,  962,  962,  962,  964,  964,  964,  964,  964,  964,
      964,  973,  973,  973,  973,  973,  973,  973,  975,  975,
      975,  975,  975,  975,  975,  977,  977,  977,  977,  977,
      977,  977,  979,  979,  979,  979,  979,  979,  979,  980,
      980,  980,  980,  980,  980,  980,  981,  981,  981,  981,
      981,  981,  981,  982,  982,  982,  982,  982,  982,  982,
      983,  983,  983,  983,  983,  983,  983,  985,    0,    0,
        0,    0,  985,  985,  985,  985,  985,  985,  985,  986,

      986,  986,  986,  986,  986,  986,  995,  995,  995,  995,
      995,  995,  995,  996,  996,  996,  996,  996,  996,  996,
      998,  998,  998,  998,  998,  998,  998,  999,  999,  999,
      999,  999,  999,  999, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1004,    0,    0,    0, 1004, 1004, 1004,
     1005,    0,    0,    0, 1005, 1005, 1005, 1006,    0,    0,
        0, 1006, 1006, 1006, 1007,    0,    0, 1007,    0,    0,
     1007, 1007, 1007, 1008,    0,    0,    0,    0,    0, 1008,
     1009,    0,    0,    0, 1009, 1009, 1009, 1010,    0,    0,
        0, 1010, 1010, 1010, 1011,    0,    0,    0, 1011, 1011,

     1011, 1012,    0,    0, 1012,    0,    0, 1012, 1012, 1012,
     1013,    0,    0,    0,    0,    0, 1013, 1015,    0,    0,
        0, 1015, 1015, 1015, 1016,    0,    0,    0, 1016, 1016,
     1016, 1017,    0,    0,    0, 1017, 1017, 1017, 1018,    0,
        0,    0, 1018, 1018, 1018, 1019,    0,    0,    0, 1019,
     1019, 1019, 1020,    0,    0,    0, 1020, 1020, 1020, 1021,
     1021,    0, 1021,    0,    0, 1021, 1021, 1021, 1022, 1022,
        0, 1022,    0, 1022, 1022, 1022, 1022, 1023,    0,    0,
        0,    0,    0, 1023, 1024,    0,    0,    0, 1024, 1024,
     1024, 1026,    0,    0,    0, 1026, 1026, 1026, 1027,    0,

        0,    0, 1027, 1027, 1027, 1028,    0,    0,    0, 1028,
     1028, 1028, 1029,    0,    0,    0,    0,    0, 1029, 1030,
        0,    0, 1030,    0,    0, 1030, 1030, 1030, 1031, 1031,
        0, 1031,    0, 1031, 1031, 1031, 1031, 1032, 1032,    0,
     1032,    0, 1032, 1032, 1032, 1032, 1033, 1033,    0, 1033,
        0, 1033, 1033, 1033, 1033, 1034, 1034,    0, 1034,    0,
        0, 1034, 1034, 1034, 1035,    0,    0,    0, 1035, 1035,
     1035, 1037,    0,    0,    0, 1037, 1037, 1037, 1038,    0,
        0,    0, 1038, 1038, 1038, 1039,    0,    0,    0, 1039,
     1039, 1039, 1040,    0,    0,    0, 1040, 1040, 1040, 1041,

        0,    0,    0, 1041, 1041, 1041, 1042,    0,    0,    0,
     1042, 1042, 1042, 1043,    0,    0,    0, 1043, 1043, 1043,
     1044,    0,    0,    0, 1044, 1044, 1044, 1045,    0,    0,
        0, 1045, 1045, 1045, 1046,    0,    0,    0, 1046, 1046,
     1046, 1047,    0,    0,    0, 1047, 1047, 1047, 1048,    0,
        0,    0, 1048, 1048, 1048, 1049,    0,    0,    0, 1049,
     1049, 1049, 1050,    0,    0, 1050,    0,    0, 1050, 1050,
     1051,    0,    0,    0, 1051, 1051, 1051, 1052, 1052,    0,
     1052,    0,    0, 1052, 1052, 1052, 1053,    0,    0, 1053,
        0,    0, 1053, 1053, 1053, 1054, 1054,    0, 1054,    0,

     1054, 1054, 1054, 1054, 1055, 1055,    0, 1055,    0,    0,
     1055, 1055, 1055, 1056, 1056,    0, 1056,    0, 1056, 1056,
     1056, 1056, 1057, 1057,    0, 1057,    0,    0, 1057, 1057,
     1057, 1058, 1058,    0, 1058,    0, 1058, 1058, 1058, 1058,
     1059, 1059,    0, 1059,    0, 1059, 1059, 1059, 1059, 1060,
     1060,    0, 1060,    0, 1060, 1060, 1060, 1060, 1061,    0,
        0, 1061,    0,    0, 1061, 1061, 1061, 1062, 1062,    0,
     1062,    0,    0, 1062, 1062, 1062, 1063,    0,    0,    0,
     1063, 1063, 1063, 1064,    0,    0,    0, 1064, 1064, 1064,
     1065,    0,    0,    0,    0,    0, 1065, 1066,    0,    0,

        0, 1066, 1066, 1066, 1067,    0,    0,    0, 1067, 1067,
     1067, 1068,    0,    0,    0, 1068, 1068, 1068, 1069,    0,
        0,    0, 1069, 1069, 1069, 1070,    0,    0,    0, 1070,
     1070, 1070, 1071,    0,    0,    0, 1071, 1071, 1071, 1072,
        0,    0,    0, 1072, 1072, 1072, 1073,    0,    0,    0,
     1073, 1073, 1073, 1074,    0,    0,    0, 1074, 1074, 1074,
     1075,    0,    0,    0, 1075, 1075, 1075, 1076,    0,    0,
        0, 1076, 1076, 1076, 1077, 1077,    0, 1077,    0,    0,
     1077, 1077, 1077, 1078, 1078,    0, 1078,    0,    0, 1078,
     1078, 1078, 1079, 1079,    0, 1079,    0,    0, 1079, 1079,

     1079, 1080, 1080,    0, 1080,    0,    0, 1080, 1080, 1080,
     1081, 1081,    0, 1081,    0, 1081, 1081, 1081, 1081, 1082,
     1082,    0, 1082,    0,    0, 1082, 1082, 1082, 1083, 1083,
        0, 1083,    0,    0, 1083, 1083, 1083, 1084, 1084,    0,
     1084,    0,    0, 1084, 1084, 1084, 1085, 1085,    0, 1085,
        0, 1085, 1085, 1085, 1085, 1086,    0,    0, 1086,    0,
        0, 1086, 1086, 1086, 1087, 1087,    0, 1087,    0, 1087,
     1087, 1087, 1087, 1088, 1088,    0, 1088,    0,    0, 1088,
     1088, 1088, 1089, 1089,    0, 1089,    0, 1089, 1089, 1089,
     1089, 1090, 1090,    0, 1090,    0, 1090, 1090, 1090, 1090,

     1091, 1091,    0, 1091,    0, 1091, 1091, 1091, 1091, 1092,
        0,    0, 1092,    0,    0, 1092, 1092, 1092, 1093,    0,
        0, 1093,    0,    0, 1093, 1093, 1093, 1094,    0,    0,
        0, 1094, 1094, 1094, 1095,    0,    0,    0, 1095, 1095,
     1095, 1096,    0,    0,    0,    0,    0, 1096, 1098,    0,
        0,    0, 1098, 1098, 1098, 1099,    0,    0,    0, 1099,
     1099, 1099, 1100,    0,    0,    0, 1100, 1100, 1100, 1101,
        0,    0,    0, 1101, 1101, 1101, 1102,    0,    0,    0,
     1102, 1102, 1102, 1103,    0,    0,    0, 1103, 1103, 1103,
     1104,    0,    0,    0, 1104, 1104, 1104, 1105,    0,    0,

        0, 1105, 1105, 1105, 1106,    0,    0,    0, 1106, 1106,
     1106, 1107,    0,    0,    0, 1107, 1107, 1107, 1108,    0,
        0,    0, 1108, 1108, 1108, 1109,    0,    0,    0, 1109,
     1109, 1109, 1110,    0,    0,    0, 1110, 1110, 1110, 1111,
        0,    0,    0, 1111, 1111, 1111, 1112,    0,    0,    0,
     1112, 1112, 1112, 1113,    0,    0,    0, 1113, 1113, 1113,
     1114,    0,    0,    0, 1114, 1114, 1114, 1115,    0,    0,
        0, 1115, 1115, 1115, 1116,    0,    0,    0, 1116, 1116,
     1116, 1117,    0,    0,    0, 1117, 1117, 1117, 1118,    0,
        0,    0, 1118, 1118, 1118, 1119,    0,    0,    0, 1119,

     1119, 1119, 1120,    0,    0,    0, 1120, 1120, 1120, 1121,
        0,    0,    0, 1121, 1121, 1121, 1122,    0,    0,    0,
     1122, 1122, 1122, 1123,    0,    0,    0, 1123, 1123, 1123,
     1124,    0,    0,    0, 1124, 1124, 1124, 1125,    0,    0,
        0, 1125, 1125, 1125, 1126,    0,    0,    0, 1126, 1126,
     1126, 1127,    0,    0,    0, 1127, 1127, 1127, 1128,    0,
        0,    0, 1128, 1128, 1128, 1129,    0,    0,    0, 1129,
     1129, 1129, 1130, 1130,    0, 1130,    0,    0, 1130, 1130,
     1130, 1131, 1131,    0, 1131, 1131,    0, 1131, 1131, 1131,
     1132,    0,    0, 1132,    0,    0, 1132, 1132, 1132, 1133,

     1133,    0, 1133,    0,    0, 1133, 1133, 1133, 1134,    0,
     1134,    0,    0,    0, 1134, 1135, 1135,    0, 1135,    0,
        0, 1135, 1135, 1135, 1136, 1136,    0, 1136,    0,    0,
     1136, 1136, 1136, 1137, 1137,    0, 1137,    0, 1137, 1137,
     1137, 1137, 1138, 1138,    0, 1138, 1138,    0, 1138, 1138,
     1138, 1139, 1139,    0, 1139,    0,    0, 1139, 1139, 1139,
     1140,    0,    0, 1140,    0,    0, 1140, 1140, 1140, 1141,
     1141,    0, 1141, 1141,    0, 1141, 1141, 1141, 1142, 1142,
        0, 1142,    0,    0, 1142, 1142, 1142, 1143, 1143,    0,
     1143, 1143, 1143, 1143, 1143, 1143, 1144, 1144,    0, 1144,

        0,    0, 1144, 1144, 1144, 1145, 1145,    0, 1145,    0,
        0, 1145, 1145, 1145, 1146, 1146,    0, 1146,    0, 1146,
     1146, 1146, 1146, 1147,    0,    0, 1147,    0,    0, 1147,
     1147, 1147, 1148, 1148,    0, 1148,    0, 1148, 1148, 1148,
     1148, 1149, 1149,    0, 1149, 1149,    0, 1149, 1149, 1149,
     1150, 1150,    0, 1150,    0, 1150, 1150, 1150, 1150, 1151,
     1151,    0, 1151, 1151, 1151, 1151, 1151, 1151, 1152,    0,
        0, 1152,    0,    0, 1152, 1152, 1152, 1153,    0,    0,
        0, 1153, 1153, 1153, 1154,    0,    0,    0, 1154, 1154,
     1154, 1156, 1156,    0, 1156,    0,    0, 1156, 1156, 1156,

     1157, 1157, 1157, 1158,    0,    0,    0, 1158, 1158, 1158,
     1159,    0,    0,    0, 1159, 1159, 1159, 1160,    0,    0,
        0, 1160, 1160, 1160, 1161,    0,    0,    0, 1161, 1161,
     1161, 1162,    0,    0,    0, 1162, 1162, 1162, 1163,    0,
        0,    0, 1163, 1163, 1163, 1164,    0,    0,    0, 1164,
     1164, 1164, 1165,    0,    0,    0, 1165, 1165, 1165, 1166,
        0,    0,    0, 1166, 1166, 1166, 1167,    0,    0,    0,
     1167, 1167, 1167, 1168, 1168, 1168, 1169, 1169, 1169, 1170,
        0,    0,    0, 1170, 1170, 1170, 1171,    0,    0,    0,
     1171, 1171, 1171, 1172,    0,    0,    0, 1172, 1172, 1172,

     1173,    0,    0,    0, 1173, 1173, 1173, 1174,    0,    0,
        0, 1174, 1174, 1174, 1175,    0,    0,    0, 1175, 1175,
     1175, 1176,    0,    0,    0, 1176, 1176, 1176, 1177,    0,
        0,    0, 1177, 1177, 1177, 1178, 1178, 1178, 1179,    0,
        0,    0, 1179, 1179, 1179, 1180,    0,    0,    0, 1180,
     1180, 1180, 1181,    0,    0,    0, 1181, 1181, 1181, 1182,
     1182, 1182, 1183,    0,    0,    0, 1183, 1183, 1183, 1184,
        0,    0,    0, 1184, 1184, 1184, 1185,    0,    0,    0,
     1185, 1185, 1185, 1186, 1186, 1186, 1187,    0,    0,    0,
     1187, 1187, 1187, 1188,    0,    0,    0, 1188, 1188, 1188,

     1189,    0,    0,    0, 1189, 1189, 1189, 1190,    0,    0,
        0, 1190, 1190, 1190, 1191,    0,    0,    0, 1191, 1191,
     1191, 1192,    0,    0,    0, 1192, 1192, 1192, 1193,    0,
        0,    0, 1193, 1193, 1193, 1194,    0,    0,    0, 1194,
     1194, 1194, 1195,    0,    0,    0, 1195, 1195, 1195, 1196,
        0,    0,    0, 1196, 1196, 1196, 1197,    0,    0,    0,
     1197, 1197, 1197, 1198,    0,    0,    0, 1198, 1198, 1198,
     1199, 1199, 1199, 1200,    0,    0,    0, 1200, 1200, 1200,
     1201,    0,    0,    0, 1201, 1201, 1201, 1202,    0,    0,
        0, 1202, 1202, 1202, 1203, 1203, 1203, 1204,    0,    0,

        0, 1204, 1204, 1204, 1205,    0,    0,    0, 1205, 1205,
     1205, 1206,    0,    0,    0, 1206, 1206, 1206, 1207, 1207,
     1207, 1208, 1208, 1208, 1209,    0,    0,    0, 1209, 1209,
     1209, 1210,    0,    0,    0, 1210, 1210, 1210, 1211,    0,
        0,    0, 1211, 1211, 1211, 1212,    0,    0,    0, 1212,
     1212, 1212, 1213,    0,    0,    0, 1213, 1213, 1213, 1214,
        0,    0,    0, 1214, 1214, 1214, 1215,    0,    0,    0,
     1215, 1215, 1215, 1216,    0,    0,    0, 1216, 1216, 1216,
     1217,    0,    0,    0, 1217, 1217, 1217, 1218,    0,    0,
        0, 1218, 1218, 1218, 1219, 1219, 1219, 1220, 1220,    0,

     1220,    0,    0, 1220, 1220, 1220, 1221,    0,    0,    0,
     1221, 1221, 1221, 1222, 1222,    0, 1222, 1222,    0, 1222,
     1222, 1222, 1223,    0,    0, 1223, 1223,    0, 1223, 1223,
     1223, 1224,    0, 1224,    0,    0,    0, 1224, 1225, 1225,
        0, 1225,    0,    0, 1225, 1225, 1225, 1226,    0, 1226,
        0,    0,    0, 1226, 1227,    0,    0, 1227,    0,    0,
     1227, 1227, 1227, 1228, 1228,    0, 1228,    0,    0, 1228,
     1228, 1228, 1229, 1229,    0, 1229,    0,    0, 1229, 1229,
     1229, 1230, 1230,    0, 1230,    0, 1230, 1230, 1230, 1230,
     1231, 1231,    0, 1231, 1231,    0, 1231, 1231, 1231, 1232,

        0,    0, 1232,    0,    0, 1232, 1232, 1232, 1233, 1233,
        0, 1233,    0,    0, 1233, 1233, 1233, 1234, 1234,    0,
     1234, 1234,    0, 1234, 1234, 1234, 1235,    0,    0, 1235,
        0,    0, 1235, 1235, 1235, 1236, 1236,    0, 1236, 1236,
        0, 1236, 1236, 1236, 1237, 1237,    0, 1237, 1237, 1237,
     1237, 1237, 1237, 1238, 1238,    0, 1238,    0,    0, 1238,
     1238, 1238, 1239, 1239,    0, 1239,    0,    0, 1239, 1239,
     1239, 1240, 1240,    0, 1240,    0,    0, 1240, 1240, 1240,
     1241, 1241,    0, 1241,    0, 1241, 1241, 1241, 1241, 1242,
     1242,    0, 1242, 1242,    0, 1242, 1242, 1242, 1243, 1243,

        0, 1243, 1243,    0, 1243, 1243, 1243, 1244, 1244,    0,
     1244, 1244, 1244, 1244, 1244, 1244, 1245,    0,    0, 1245,
        0,    0, 1245, 1245, 1245, 1246, 1246,    0, 1246,    0,
     1246, 1246, 1246, 1246, 1247, 1247, 1247, 1248,    0,    0,
        0,    0,    0, 1248, 1250,    0,    0, 1250,    0,    0,
     1250, 1250, 1250, 1251, 1251,    0, 1251,    0,    0, 1251,
     1251, 1251, 1252,    0,    0,    0, 1252, 1252, 1252, 1253,
        0,    0,    0, 1253, 1253, 1253, 1254,    0,    0,    0,
     1254, 1254, 1254, 1255,    0,    0,    0, 1255, 1255, 1255,
     1256,    0,    0,    0, 1256, 1256, 1256, 1257,    0,    0,

        0, 1257, 1257, 1257, 1258,    0,    0,    0, 1258, 1258,
     1258, 1259,    0,    0,    0, 1259, 1259, 1259, 1260,    0,
        0,    0, 1260, 1260, 1260, 1261,    0,    0,    0, 1261,
     1261, 1261, 1262,    0,    0,    0, 1262, 1262, 1262, 1263,
        0,    0,    0, 1263, 1263, 1263, 1264,    0,    0,    0,
     1264, 1264, 1264, 1265,    0,    0,    0, 1265, 1265, 1265,
     1266,    0,    0,    0, 1266, 1266, 1266, 1267,    0,    0,
        0, 1267, 1267, 1267, 1268,    0,    0,    0, 1268, 1268,
     1268, 1269,    0,    0,    0, 1269, 1269, 1269, 1270,    0,
        0,    0, 1270, 1270, 1270, 1271,    0,    0,    0, 1271,

     1271, 1271, 1272,    0,    0,    0, 1272, 1272, 1272, 1273,
        0,    0,    0, 1273, 1273, 1273, 1274,    0,    0,    0,
     1274, 1274, 1274, 1275,    0,    0,    0, 1275, 1275, 1275,
     1276,    0,    0,    0, 1276, 1276, 1276, 1277,    0,    0,
        0, 1277, 1277, 1277, 1278,    0,    0,    0, 1278, 1278,
     1278, 1279,    0,    0,    0, 1279, 1279, 1279, 1280,    0,
        0,    0, 1280, 1280, 1280, 1281,    0,    0,    0, 1281,
     1281, 1281, 1282,    0,    0,    0, 1282, 1282, 1282, 1283,
        0,    0,    0, 1283, 1283, 1283, 1284,    0,    0,    0,
     1284, 1284, 1284, 1285,    0,    0,    0, 1285, 1285, 1285,

     1286,    0,    0,    0, 1286, 1286, 1286, 1287,    0,    0,
        0, 1287, 1287, 1287, 1288,    0,    0,    0, 1288, 1288,
     1288, 1289,    0,    0,    0, 1289, 1289, 1289, 1290,    0,
        0,    0, 1290, 1290, 1290, 1291,    0,    0,    0, 1291,
     1291, 1291, 1292,    0,    0,    0, 1292, 1292, 1292, 1293,
        0,    0,    0, 1293, 1293, 1293, 1294,    0,    0,    0,
     1294, 1294, 1294, 1295,    0,    0,    0, 1295, 1295, 1295,
     1296,    0,    0,    0, 1296, 1296, 1296, 1297,    0,    0,
        0, 1297, 1297, 1297, 1298,    0,    0,    0, 1298, 1298,
     1298, 1299,    0,    0,    0, 1299, 1299, 1299, 1300,    0,

        0,    0, 1300, 1300, 1300, 1301,    0,    0,    0, 1301,
     1301, 1301, 1302,    0,    0,    0, 1302, 1302, 1302, 1303,
        0,    0,    0, 1303, 1303, 1303, 1304,    0,    0,    0,
     1304, 1304, 1304, 1305,    0,    0,    0, 1305, 1305, 1305,
     1306,    0,    0,    0, 1306, 1306, 1306, 1307,    0,    0,
        0, 1307, 1307, 1307, 1308,    0,    0,    0, 1308, 1308,
     1308, 1309,    0,    0,    0, 1309, 1309, 1309, 1310,    0,
        0,    0, 1310, 1310, 1310, 1311,    0,    0,    0, 1311,
     1311, 1311, 1312,    0,    0,    0, 1312, 1312, 1312, 1313,
        0,    0,    0, 1313, 1313, 1313, 1314,    0,    0,    0,

     1314, 1314, 1314, 1315,    0,    0,    0, 1315, 1315, 1315,
     1316,    0,    0,    0, 1316, 1316, 1316, 1317,    0,    0,
        0, 1317, 1317, 1317, 1318,    0,    0,    0, 1318, 1318,
     1318, 1319,    0,    0,    0, 1319, 1319, 1319, 1320,    0,
        0,    0, 1320, 1320, 1320, 1321,    0,    0,    0, 1321,
     1321, 1321, 1322,    0,    0,    0, 1322, 1322, 1322, 1323,
        0,    0,    0, 1323, 1323, 1323, 1324,    0,    0,    0,
     1324, 1324, 1324, 1325,    0,    0,    0, 1325, 1325, 1325,
     1326,    0,    0,    0, 1326, 1326, 1326, 1327,    0,    0,
        0, 1327, 1327, 1327, 1328,    0,    0,    0, 1328, 1328,

     1328, 1329,    0,    0,    0, 1329, 1329, 1329, 1330,    0,
        0,    0, 1330, 1330, 1330, 1331,    0,    0,    0, 1331,
     1331, 1331, 1332,    0,    0,    0, 1332, 1332, 1332, 1333,
        0,    0,    0, 1333, 1333, 1333, 1334,    0,    0,    0,
     1334, 1334, 1334, 1335,    0,    0,    0, 1335, 1335, 1335,
     1336, 1336,    0, 1336,    0,    0, 1336, 1336, 1336, 1337,
        0,    0,    0, 1337, 1337, 1337, 1338,    0,    0, 1338,
     1338,    0, 1338, 1338, 1338, 1339,    0, 1339,    0,    0,
        0, 1339, 1340, 1340,    0, 1340,    0,    0, 1340, 1340,
     1340, 1341,    0,    0, 1341,    0,    0, 1341, 1341, 1341,

     1342, 1342,    0, 1342,    0, 1342, 1342, 1342, 1342, 1343,
     1343,    0, 1343, 1343,    0, 1343, 1343, 1343, 1344,    0,
        0, 1344,    0,    0, 1344, 1344, 1344, 1345, 1345,    0,
     1345, 1345,    0, 1345, 1345, 1345, 1346,    0,    0, 1346,
        0,    0, 1346, 1346, 1346, 1347, 1347,    0, 1347, 1347,
     1347, 1347, 1347, 1347, 1348, 1348,    0, 1348, 1348,    0,
     1348, 1348, 1348, 1349, 1349,    0, 1349, 1349,    0, 1349,
     1349, 1349, 1350, 1350,    0, 1350,    0,    0, 1350, 1350,
     1350, 1351, 1351,    0, 1351, 1351,    0, 1351, 1351, 1351,
     1352, 1352,    0, 1352, 1352, 1352, 1352, 1352, 1352, 1353,

        0,    0,    0,    0,    0, 1353, 1355, 1355,    0, 1355,
        0,    0, 1355, 1355, 1355, 1356,    0,    0,    0, 1356,
     1356, 1356, 1357,    0,    0,    0, 1357, 1357, 1357, 1358,
        0,    0,    0, 1358, 1358, 1358, 1359,    0,    0,    0,
     1359, 1359, 1359, 1360,    0,    0,    0, 1360, 1360, 1360,
     1361,    0,    0,    0, 1361, 1361, 1361, 1362,    0,    0,
        0, 1362, 1362, 1362, 1363,    0,    0,    0, 1363, 1363,
     1363, 1364,    0,    0,    0, 1364, 1364, 1364, 1365,    0,
        0,    0, 1365, 1365, 1365, 1366,    0,    0,    0, 1366,
     1366, 1366, 1367,    0,    0,    0, 1367, 1367, 1367, 1368,

        0,    0,    0, 1368, 1368, 1368, 1369,    0,    0,    0,
     1369, 1369, 1369, 1370,    0,    0,    0, 1370, 1370, 1370,
     1371,    0,    0,    0, 1371, 1371, 1371, 1372,    0,    0,
        0, 1372, 1372, 1372, 1373,    0,    0,    0, 1373, 1373,
     1373, 1374,    0,    0,    0, 1374, 1374, 1374, 1375,    0,
        0,    0, 1375, 1375, 1375, 1376, 1376, 1376, 1377, 1377,
     1377, 1378, 1378, 1378, 1379, 1379, 1379, 1380,    0,    0,
        0, 1380, 1380, 1380, 1381,    0,    0,    0, 1381, 1381,
     1381, 1382,    0,    0,    0, 1382, 1382, 1382, 1383,    0,
        0,    0, 1383, 1383, 1383, 1384,    0,    0,    0, 1384,

     1384, 1384, 1385,    0,    0,    0, 1385, 1385, 1385, 1386,
        0,    0,    0, 1386, 1386, 1386, 1387,    0,    0,    0,
     1387, 1387, 1387, 1388,    0,    0,    0, 1388, 1388, 1388,
     1389,    0,    0,    0, 1389, 1389, 1389, 1390,    0,    0,
        0, 1390, 1390, 1390, 1391,    0,    0,    0, 1391, 1391,
     1391, 1392, 1392, 1392, 1393, 1393, 1393, 1394, 1394, 1394,
     1395, 1395, 1395, 1396, 1396, 1396, 1397, 1397, 1397, 1398,
        0,    0,    0, 1398, 1398, 1398, 1399,    0,    0,    0,
     1399, 1399, 1399, 1400,    0,    0,    0, 1400, 1400, 1400,
     1401,    0,    0,    0, 1401, 1401, 1401, 1402,    0,    0,

        0, 1402, 1402, 1402, 1403,    0,    0,    0, 1403, 1403,
     1403, 1404,    0,    0,    0, 1404, 1404, 1404, 1405,    0,
        0,    0, 1405, 1405, 1405, 1406,    0,    0,    0, 1406,
     1406, 1406, 1407,    0,    0,    0, 1407, 1407, 1407, 1408,
        0,    0,    0, 1408, 1408, 1408, 1409,    0,    0,    0,
     1409, 1409, 1409, 1410,    0,    0,    0, 1410, 1410, 1410,
     1411,    0,    0,    0, 1411, 1411, 1411, 1412,    0,    0,
        0, 1412, 1412, 1412, 1413,    0,    0,    0, 1413, 1413,
     1413, 1414,    0,    0,    0, 1414, 1414, 1414, 1415,    0,
        0,    0, 1415, 1415, 1415, 1416,    0,    0,    0, 1416,

     1416, 1416, 1417,    0,    0,    0, 1417, 1417, 1417, 1418,
        0,    0,    0, 1418, 1418, 1418, 1419,    0,    0,    0,
     1419, 1419, 1419, 1420,    0,    0,    0, 1420, 1420, 1420,
     1421,    0,    0,    0, 1421, 1421, 1421, 1422,    0,    0,
        0, 1422, 1422, 1422, 1423,    0,    0,    0, 1423, 1423,
     1423, 1424,    0,    0,    0, 1424, 1424, 1424, 1425,    0,
        0,    0, 1425, 1425, 1425, 1426,    0,    0,    0, 1426,
     1426, 1426, 1427,    0,    0,    0, 1427, 1427, 1427, 1428,
        0,    0,    0, 1428, 1428, 1428, 1429,    0,    0,    0,
     1429, 1429, 1429, 1430, 1430,    0, 1430, 1430,    0, 1430,

     1430, 1430, 1431,    0, 1431,    0,    0,    0, 1431, 1432,
     1432,    0, 1432,    0,    0, 1432, 1432, 1432, 1433, 1433,
        0, 1433,    0, 1433, 1433, 1433, 1433, 1434,    0,    0,
     1434, 1434,    0, 1434, 1434, 1434, 1435, 1435,    0, 1435,
     1435,    0, 1435, 1435, 1435, 1436, 1436,    0, 1436, 1436,
        0, 1436, 1436, 1436, 1437, 1437,    0, 1437, 1437, 1437,
     1437, 1437, 1437, 1438,    0,    0, 1438,    0,    0, 1438,
     1438, 1438, 1439, 1439,    0, 1439, 1439,    0, 1439, 1439,
     1439, 1441, 1441,    0, 1441,    0,    0, 1441, 1441, 1441,
     1442, 1442,    0, 1442,    0,    0, 1442, 1442, 1442, 1443,

     1443, 1443, 1444, 1444, 1444, 1445, 1445, 1445, 1446, 1446,
     1446, 1447, 1447, 1447, 1448, 1448, 1448, 1449, 1449, 1449,
     1450, 1450, 1450, 1451, 1451, 1451, 1452, 1452, 1452, 1453,
     1453, 1453, 1454, 1454, 1454, 1455, 1455, 1455, 1456, 1456,
     1456, 1457, 1457, 1457, 1458, 1458, 1458, 1459, 1459, 1459,
     1460, 1460, 1460, 1461, 1461, 1461, 1462, 1462, 1462, 1463,
     1463, 1463, 1464, 1464, 1464, 1465, 1465, 1465, 1466, 1466,
     1466, 1467, 1467, 1467, 1468, 1468, 1468, 1469, 1469, 1469,
     1470, 1470, 1470, 1471, 1471, 1471, 1472, 1472, 1472, 1473,
     1473, 1473, 1474, 1474, 1474, 1475,    0,    0,    0, 1475,

     1475, 1475, 1476, 1476,    0, 1476,    0,    0, 1476, 1476,
     1476, 1477,    0,    0, 1477, 1477,    0, 1477, 1477, 1477,
     1479, 1479,    0, 1479, 1479,    0, 1479, 1479, 1479, 1480,
        0,    0, 1480,    0,    0, 1480, 1480, 1480, 1481,    0,
        0,    0, 1481, 1481, 1481, 1482,    0,    0,    0,    0,
        0, 1482, 1483,    0, 1483,    0,    0,    0, 1483, 1484,
     1484,    0, 1484,    0,    0, 1484, 1484, 1484, 1485,    0,
        0, 1485, 1485,    0, 1485, 1485, 1485, 1486,    0,    0,
        0, 1486, 1486, 1486, 1487,    0,    0,    0, 1487, 1488,
        0,    0,    0,    0,    0, 1488, 1489,    0, 1489,    0,

        0,    0, 1489, 1490,    0,    0,    0,    0,    0, 1490,
     1491,    0, 1491,    0,    0,    0, 1491, 1492, 1492,    0,
     1492,    0,    0, 1492, 1492, 1492, 1493,    0,    0,    0,
     1493, 1494,    0,    0,    0, 1494, 1495,    0, 1495,    0,
        0,    0, 1495, 1496,    0,    0,    0, 1496, 1497,    0,
     1497,    0,    0,    0, 1497, 1498,    0, 1498,    0,    0,
        0, 1498, 1499,    0,    0,    0, 1499, 1500,    0,    0,
        0, 1500, 1501,    0, 1501,    0,    0,    0, 1501, 1502,
        0,    0,    0, 1502, 1503,    0, 1503,    0,    0,    0,
     1503, 1504,    0, 1504,    0,    0,    0, 1504, 1505,    0,

        0,    0, 1505, 1506,    0,    0,    0, 1506, 1507,    0,
     1507,    0,    0,    0, 1507, 1508,    0, 1508,    0,    0,
        0, 1508, 1509,    0, 1509,    0,    0,    0, 1509, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "deadly.ll"
/*
 * deadly.ll
 *
 * It is used in our Programming laboratory exercises
 * at the University of Debrecen. For details, see the books "Bátfai
 * Norbert: Programozó Páternoszter újratöltve: C, C++, Java, Python és
 * AspectJ esettanulmányok"
 * http://www.inf.unideb.hu/~nbatfai/konyvek/PROP/prop.book.xml.pdf
 * and "Bátfai Norbert: Mesterséges intelligencia a gyakorlatban: bevezetés
 * a  robotfoci programozásba"
 * http://www.inf.unideb.hu/~nbatfai/konyvek/MIRC/mirc.book.xml.pdf
 *
 * Norbert Bátfai, PhD
 * batfai.norbert@inf.unideb.hu, nbatfai@gmail.com
 * IT Dept, University of Debrecen
 *
 * Mamenyák András, BSc, University of Debrecen
 * Komzsik János, BSc, University of Debrecen
 */
/*
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * http://www.gnu.org/licenses/gpl.html
 */
/*
 * References
 * Felhasznált és ajánlott irodalom:
 *
 * Don Blaheta: Project 2: Lexer
 * http://torvalds.cs.longwood.edu/courses/cmsc445/s12/proj2.pdf
 *
 * John R. Levine: flex & bison, O’Reilly, 2009
 *
 * Lexical Analysis With Flex
 * http://flex.sourceforge.net/manual
 *
 * Bison - GNU parser generator
 * www.gnu.org/software/bison/manual/
 * A Complete C++ Example
 * http://www.gnu.org/software/bison/manual/html_node/A-Complete-C_002b_002b-Example.html#A-Complete-C_002b_002b-Example
 * http://www.gnu.org/software/bison/manual/html_node/C_002b_002b-Parsers.html#C_002b_002b-Parsers
 */
#line 58 "deadly.ll"
#define YY_DECL int DeadlyLexer::yylex()
#include "deadly.h"
#include <cstdio>
/*
 *  // See the figure entitled "Figure 4.2: The fags and lines in the simulation."
 *  // in the RCSS manual, version "February 11, 2003" pp. 47. at http://sourceforge.net/projects/sserver/files/rcssmanual/9-20030211/
 */
#line 2470 "deadly.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 166 "deadly.ll"

#line 2577 "deadly.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1003 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 7030 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 167 "deadly.ll"
{
    std::sscanf(yytext, "(init %c %d %s", &lr, &squad_number, hear_buffer);
    if (! std::strncmp(hear_buffer, "before_kick_off", 15))
        play_mode = before_kick_off;
    if(lr == 'l')
        side = 1;
    else
        side = -1;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 176 "deadly.ll"
{
    std::sscanf(yytext, "(sense_body %d", &time);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 179 "deadly.ll"
{
    std::sscanf(yytext, "(head_angle %lf", &estha);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 182 "deadly.ll"
{
    std::sscanf(yytext, "(stamina %d", &stamina);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 185 "deadly.ll"
{
    std::sscanf(yytext, "(view_mode %s %s)", quality_buffer, width_buffer);
    if (! std::strncmp(quality_buffer, "high", 4))
        quality = 1;
    if (! std::strncmp(quality_buffer, "low", 3))
        quality = 0;
    if (! std::strncmp(width_buffer, "narrow", 6))
        width = -1;
    if (! std::strncmp(width_buffer, "normal", 6))
        width = 0;
    if (! std::strncmp(width_buffer, "wide", 4))
        width = 1;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 198 "deadly.ll"
{
    std::sscanf(yytext, "(see %d", &time);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 201 "deadly.ll"
{
    std::sscanf(yytext, "(light %lf %lf %lf", &estx, &esty, &esta);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 204 "deadly.ll"
{
    std::sscanf(yytext, "((f c) %lf %lf", &dist, &ang);
    flags[Flag::FC].set_distang(time, dist, ang);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 208 "deadly.ll"
{
    std::sscanf(yytext, "((f c t) %lf %lf", &dist, &ang);
    flags[Flag::FCT].set_distang(time, dist, ang);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 212 "deadly.ll"
{
    std::sscanf(yytext, "((f c b) %lf %lf", &dist, &ang);
    flags[Flag::FCB].set_distang(time, dist, ang);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 216 "deadly.ll"
{
    std::sscanf(yytext, "((f g r t) %lf %lf", &dist, &ang);
    flags[Flag::GRT].set_distang(time, dist, ang);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 220 "deadly.ll"
{
    std::sscanf(yytext, "((g r) %lf %lf", &dist, &ang);
    flags[Flag::GR].set_distang(time, dist, ang);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 224 "deadly.ll"
{
    std::sscanf(yytext, "((f g r b) %lf %lf", &dist, &ang);
    flags[Flag::GRB].set_distang(time, dist, ang);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 228 "deadly.ll"
{
    std::sscanf(yytext, "((f g l t) %lf %lf", &dist, &ang);
    flags[Flag::GLT].set_distang(time, dist, ang);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 232 "deadly.ll"
{
    std::sscanf(yytext, "((g l) %lf %lf", &dist, &ang);
    flags[Flag::GL].set_distang(time, dist, ang);
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 236 "deadly.ll"
{
    std::sscanf(yytext, "((f g l b) %lf %lf", &dist, &ang);
    flags[Flag::GLB].set_distang(time, dist, ang);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 240 "deadly.ll"
{
    std::sscanf(yytext, "((f p r t) %lf %lf", &dist, &ang);
    flags[Flag::PRT].set_distang(time, dist, ang);
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 244 "deadly.ll"
{
    std::sscanf(yytext, "((f p r) %lf %lf", &dist, &ang);
    flags[Flag::PR].set_distang(time, dist, ang);
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 248 "deadly.ll"
{
    std::sscanf(yytext, "((f p r b) %lf %lf", &dist, &ang);
    flags[Flag::PRB].set_distang(time, dist, ang);
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 252 "deadly.ll"
{
    std::sscanf(yytext, "((f p l t) %lf %lf", &dist, &ang);
    flags[Flag::PLT].set_distang(time, dist, ang);
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 256 "deadly.ll"
{
    std::sscanf(yytext, "((f p l) %lf %lf", &dist, &ang);
    flags[Flag::PL].set_distang(time, dist, ang);
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 260 "deadly.ll"
{
    std::sscanf(yytext, "((f p l b) %lf %lf", &dist, &ang);
    flags[Flag::PLB].set_distang(time, dist, ang);
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 264 "deadly.ll"
{
    std::sscanf(yytext, "((f r t) %lf %lf", &dist, &ang);
    flags[Flag::RT].set_distang(time, dist, ang);
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 268 "deadly.ll"
{
    std::sscanf(yytext, "((f r b) %lf %lf", &dist, &ang);
    flags[Flag::RB].set_distang(time, dist, ang);
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 272 "deadly.ll"
{
    std::sscanf(yytext, "((f l t) %lf %lf", &dist, &ang);
    flags[Flag::LT].set_distang(time, dist, ang);
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 276 "deadly.ll"
{
    std::sscanf(yytext, "((f l b) %lf %lf", &dist, &ang);
    flags[Flag::LB].set_distang(time, dist, ang);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 280 "deadly.ll"
{
    std::sscanf(yytext, "((f r b 30) %lf %lf", &dist, &ang);
    flags[Flag::FRB30].set_distang(time, dist, ang);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 284 "deadly.ll"
{
    std::sscanf(yytext, "((f r b 20) %lf %lf", &dist, &ang);
    flags[Flag::FRB20].set_distang(time, dist, ang);
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 288 "deadly.ll"
{
    std::sscanf(yytext, "((f r b 10) %lf %lf", &dist, &ang);
    flags[Flag::FRB10].set_distang(time, dist, ang);
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 292 "deadly.ll"
{
    std::sscanf(yytext, "((f r 0) %lf %lf", &dist, &ang);
    flags[Flag::FR0].set_distang(time, dist, ang);
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 296 "deadly.ll"
{
    std::sscanf(yytext, "((f r t 30) %lf %lf", &dist, &ang);
    flags[Flag::FRT30].set_distang(time, dist, ang);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 300 "deadly.ll"
{
    std::sscanf(yytext, "((f r t 20) %lf %lf", &dist, &ang);
    flags[Flag::FRT20].set_distang(time, dist, ang);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 304 "deadly.ll"
{
    std::sscanf(yytext, "((f r t 10) %lf %lf", &dist, &ang);
    flags[Flag::FRT10].set_distang(time, dist, ang);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 308 "deadly.ll"
{
    std::sscanf(yytext, "((f l b 30) %lf %lf", &dist, &ang);
    flags[Flag::FLB30].set_distang(time, dist, ang);
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 312 "deadly.ll"
{
    std::sscanf(yytext, "((f l b 20) %lf %lf", &dist, &ang);
    flags[Flag::FLB20].set_distang(time, dist, ang);
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 316 "deadly.ll"
{
    std::sscanf(yytext, "((f l b 10) %lf %lf", &dist, &ang);
    flags[Flag::FLB10].set_distang(time, dist, ang);
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 320 "deadly.ll"
{
    std::sscanf(yytext, "((f l 0) %lf %lf", &dist, &ang);
    flags[Flag::FL0].set_distang(time, dist, ang);
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 324 "deadly.ll"
{
    std::sscanf(yytext, "((f l t 30) %lf %lf", &dist, &ang);
    flags[Flag::FLT30].set_distang(time, dist, ang);
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 328 "deadly.ll"
{
    std::sscanf(yytext, "((f l t 20) %lf %lf", &dist, &ang);
    flags[Flag::FLT20].set_distang(time, dist, ang);
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 332 "deadly.ll"
{
    std::sscanf(yytext, "((f l t 10) %lf %lf", &dist, &ang);
    flags[Flag::FLT10].set_distang(time, dist, ang);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 336 "deadly.ll"
{
    std::sscanf(yytext, "((f t r 50) %lf %lf", &dist, &ang);
    flags[Flag::FTR50].set_distang(time, dist, ang);
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 340 "deadly.ll"
{
    std::sscanf(yytext, "((f t r 40) %lf %lf", &dist, &ang);
    flags[Flag::FTR40].set_distang(time, dist, ang);
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 344 "deadly.ll"
{
    std::sscanf(yytext, "((f t r 30) %lf %lf", &dist, &ang);
    flags[Flag::FTR30].set_distang(time, dist, ang);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 348 "deadly.ll"
{
    std::sscanf(yytext, "((f t r 20) %lf %lf", &dist, &ang);
    flags[Flag::FTR20].set_distang(time, dist, ang);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 352 "deadly.ll"
{
    std::sscanf(yytext, "((f t r 10) %lf %lf", &dist, &ang);
    flags[Flag::FTR10].set_distang(time, dist, ang);
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 356 "deadly.ll"
{
    std::sscanf(yytext, "((f t 0) %lf %lf", &dist, &ang);
    flags[Flag::FT0].set_distang(time, dist, ang);
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 360 "deadly.ll"
{
    std::sscanf(yytext, "((f t l 50) %lf %lf", &dist, &ang);
    flags[Flag::FTL50].set_distang(time, dist, ang);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 364 "deadly.ll"
{
    std::sscanf(yytext, "((f t l 40) %lf %lf", &dist, &ang);
    flags[Flag::FTL40].set_distang(time, dist, ang);
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 368 "deadly.ll"
{
    std::sscanf(yytext, "((f t l 30) %lf %lf", &dist, &ang);
    flags[Flag::FTL30].set_distang(time, dist, ang);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 372 "deadly.ll"
{
    std::sscanf(yytext, "((f t l 20) %lf %lf", &dist, &ang);
    flags[Flag::FTL20].set_distang(time, dist, ang);
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 376 "deadly.ll"
{
    std::sscanf(yytext, "((f t l 10) %lf %lf", &dist, &ang);
    flags[Flag::FTL10].set_distang(time, dist, ang);
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 380 "deadly.ll"
{
    std::sscanf(yytext, "((f b r 50) %lf %lf", &dist, &ang);
    flags[Flag::FBR50].set_distang(time, dist, ang);
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 384 "deadly.ll"
{
    std::sscanf(yytext, "((f b r 40) %lf %lf", &dist, &ang);
    flags[Flag::FBR40].set_distang(time, dist, ang);
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 388 "deadly.ll"
{
    std::sscanf(yytext, "((f b r 30) %lf %lf", &dist, &ang);
    flags[Flag::FBR30].set_distang(time, dist, ang);
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 392 "deadly.ll"
{
    std::sscanf(yytext, "((f b r 20) %lf %lf", &dist, &ang);
    flags[Flag::FBR20].set_distang(time, dist, ang);
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 396 "deadly.ll"
{
    std::sscanf(yytext, "((f b r 10) %lf %lf", &dist, &ang);
    flags[Flag::FBR10].set_distang(time, dist, ang);
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 400 "deadly.ll"
{
    std::sscanf(yytext, "((f b 0) %lf %lf", &dist, &ang);
    flags[Flag::FB0].set_distang(time, dist, ang);
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 404 "deadly.ll"
{
    std::sscanf(yytext, "((f b l 50) %lf %lf", &dist, &ang);
    flags[Flag::FBL50].set_distang(time, dist, ang);
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 408 "deadly.ll"
{
    std::sscanf(yytext, "((f b l 40) %lf %lf", &dist, &ang);
    flags[Flag::FBL40].set_distang(time, dist, ang);
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 412 "deadly.ll"
{
    std::sscanf(yytext, "((f b l 30) %lf %lf", &dist, &ang);
    flags[Flag::FBL30].set_distang(time, dist, ang);
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 416 "deadly.ll"
{
    std::sscanf(yytext, "((f b l 20) %lf %lf", &dist, &ang);
    flags[Flag::FBL20].set_distang(time, dist, ang);
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 420 "deadly.ll"
{
    std::sscanf(yytext, "((f b l 10) %lf %lf", &dist, &ang);
    flags[Flag::FBL10].set_distang(time, dist, ang);
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 424 "deadly.ll"
{
    std::sscanf(yytext, "((b) %lf %lf", &dist, &ang);
    ball->set_distang(time, dist, ang, estx, esty, esta);
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 428 "deadly.ll"
{
    std::sscanf(yytext, "((B) %lf %lf", &dist, &ang);
    ball->set_distang(time, dist, ang, estx, esty, esta);
    bigball_time = time;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 433 "deadly.ll"
{
    std::sscanf(yytext, "((P) %lf %lf", &dist, &ang);
    bigplayer_time = time;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 437 "deadly.ll"
{
    std::sscanf(yytext, "((p \"%s %d) %lf %lf", teamname_buffer, &squadnumber_buffer, &dist, &ang);
    if(!std::strncmp(teamname_buffer, team.c_str(), strlen(teamname_buffer)-1))
        own_team[squadnumber_buffer-1].set_distang(time, dist, ang, estx, esty, esta);
    else
        other_team[squadnumber_buffer-1].set_distang(time, dist, ang, estx, esty, esta);
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 444 "deadly.ll"
{
    std::sscanf(yytext, "((p \"%s %d goalie) %lf %lf", teamname_buffer, &squadnumber_buffer, &dist, &ang);
    if(!std::strcmp(teamname_buffer, team.c_str()))
        own_team[squadnumber_buffer-1].set_distang(time, dist, ang, estx, esty, esta);
    else
        other_team[squadnumber_buffer-1].set_distang(time, dist, ang, estx, esty, esta);
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 451 "deadly.ll"
{
    std::sscanf(yytext, "(hear %d %s %s)", &time, sender_buffer, hear_buffer);
    if (! std::strncmp(hear_buffer, "before_kick_off", 15))
        play_mode = before_kick_off;
    else if (! std::strncmp(hear_buffer, "play_on", 7))
        play_mode = play_on;
    else if (! std::strncmp(hear_buffer, "half_time", 9))
        play_mode = half_time;
    else if (! std::strncmp(hear_buffer, "drop_ball", 9))
        play_mode = drop_ball;
    else if (! std::strncmp(hear_buffer, "kick_off_l", 10))
        play_mode = kick_off_l;
    else if (! std::strncmp(hear_buffer, "kick_off_r", 10))
        play_mode = kick_off_r;
    else if (! std::strncmp(hear_buffer, "corner_kick_l", 13))
        play_mode = corner_kick_l;
    else if (! std::strncmp(hear_buffer, "corner_kick_r", 13))
        play_mode = corner_kick_r;
    else if (! std::strncmp(hear_buffer, "free_kick_r", 11))
        play_mode = free_kick_r;
    else if (! std::strncmp(hear_buffer, "free_kick_l", 11))
        play_mode = free_kick_l;
    else if (! std::strncmp(hear_buffer, "kick_in_l", 9))
        play_mode = kick_in_l;
    else if (! std::strncmp(hear_buffer, "kick_in_r", 9))
        play_mode = kick_in_r;
    else if (! std::strncmp(hear_buffer, "goal_l", 6))
        play_mode = goal_l;
    else if (! std::strncmp(hear_buffer, "goal_r", 6))
        play_mode = goal_r;
    else if (! std::strncmp(hear_buffer, "goal_kick_l", 11))
        play_mode = goal_kick_l;
    else if (! std::strncmp(hear_buffer, "goal_kick_r", 11))
        play_mode = goal_kick_r;
    else if (! std::strncmp(hear_buffer, "back_pass_l", 11))
        play_mode = back_pass_l;
    else if (! std::strncmp(hear_buffer, "back_pass_r", 11))
        play_mode = back_pass_r;
    else if (! std::strncmp(hear_buffer, "offside_l", 9))
        play_mode = offside_l;
    else if (! std::strncmp(hear_buffer, "offside_r", 9))
        play_mode = offside_r;
    else if (! std::strncmp(hear_buffer, "foul_charge_r", 13))
        play_mode = foul_charge_r;
    else if (! std::strncmp(hear_buffer, "foul_charge_l", 13))
        play_mode = foul_charge_l;
    else if (! std::strncmp(hear_buffer, "indirect_free_kick_l", 20))
        play_mode = indirect_free_kick_l;
    else if (! std::strncmp(hear_buffer, "indirect_free_kick_r", 20))
        play_mode = indirect_free_kick_r;
    else if (! std::strncmp(hear_buffer, "free_kick_fault_r", 17))
        play_mode = indirect_free_kick_r;
    else if (! std::strncmp(hear_buffer, "free_kick_fault_l", 17))
        play_mode = indirect_free_kick_l;
    //else std::cout << sender_buffer << " " << hear_buffer << "\n";
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 507 "deadly.ll"
{
    std::sscanf(yytext, "(hear %d %lf %s %d \"pass %d\"", &time, &ang, sender_buffer, &squadnumber_buffer, &pass_buffer);
    if (! std::strcmp(sender_buffer, "our") && pass != pass_buffer)
    {
        pass = pass_buffer;
	pass_time = time;
    }
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 515 "deadly.ll"
{
    std::sscanf(yytext, "(hear %d %lf %s \"pass %d\"", &time, &ang, sender_buffer, &pass_buffer);
    if (! std::strcmp(sender_buffer, "our") && pass != pass_buffer)
    {
        pass = pass_buffer;
	pass_time = time;
    }
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 523 "deadly.ll"
{
    ;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 526 "deadly.ll"
ECHO;
	YY_BREAK
#line 3308 "deadly.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1003 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1003 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1002);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 526 "deadly.ll"



int yyFlexLexer::yylex() {
    return -1;
}
